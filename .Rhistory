# Load necessary libraries
library(ggplot2)
library(ggalt)
library(RColorBrewer)
library(plyr)
options(scipen = 999) #Positive values bias towards fixed and negative towards scientific notation
# Set the bw theme (layout) for ggplot.
theme_set(theme_bw())
# Set working directory
setwd("D:/Pacific cod/DataAnalysis/PCod-Compare-repo")
mydata <- read.delim("pstacks_loci_counts_b8_forR.txt")
#### HEADER SHOULD BE:(tab delimited)
#filename loci  population
View(mydata)
######### using facet_wrap to plot this
ggplot(mydata,aes(x=n_loci, fill = group)) +
geom_histogram(data = mydata, bins= 20) +
facet_wrap(~population) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
#### Use aggregate function to calculate
mymean <- aggregate(x = mydata$loci, by = list(mydata$group), mean)
mymean <- aggregate(x = mydata$loci, by = list(mydata$population), mean)
mymean <- aggregate(x = mydata$n_loci, by = list(mydata$population), mean)
my01quantile <- ddply(mydata, "population", summarise, pstacks_01_quantile = quantile(n_loci, .01))
mean(my01quantile$pstacks_01_quantile)
trouble_samples <- mydata[mydata$n_loci<12000,]
good_samples <- mydata[mydata$loci>12000,]#Grab a subset of data with low numbers of loci present
ggplot(mydata,aes(x=n_loci, fill = population)) +
geom_histogram(data = mydata, bins= 20) +
facet_wrap(~population) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
#### Use aggregate function to calculate
mydata <- read.delim("pstacks_loci_counts_b8_forR.txt")
View(mydata)
ggplot(mydata,aes(x=n_loci, fill = group)) +
geom_histogram(data = mydata, bins= 20) +
facet_wrap(~population) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
#Read in your datatable from a tab-delimited text file
mydata_gen <- read.delim("genepop_loci_counts_b8_forR.txt")
#### HEADER SHOULD BE:(tab delimited)
#filename loci  population
# Make the plot!!!
######### using facet_wrap to plot this
ggplot(mydata_gen,aes(x=n_loci, fill = group)) +
geom_histogram(data = mydata, bins= 20) +
facet_wrap(~population) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
View(mydata_gen)
ggplot(mydata_gen,aes(x=n_loci, fill = group)) +
geom_histogram(data = mydata_gen, bins= 20) +
facet_wrap(~population) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
mymean <- aggregate(x = mydata$n_loci, by = list(mydata$population), mean)
### Use plyr package to estimate 1% quantile in the data per pop
my01quantile <- ddply(mydata, "population", summarise, pstacks_01_quantile = quantile(n_loci, .01))
mean(my01quantile$pstacks_01_quantile)
## Check up on a subset of individuals
trouble_samples <- mydata[mydata$n_loci<12000,]
good_samples <- mydata[mydata$loci>12000,]#Grab a subset of data with low numbers of loci present
# sort by number of loci in each sample (to help pick what individuals should go in the catalog)
sorted_samples <- good_samples[order(good_samples$loci),]
write.table(trouble_samples, "samples_to_remove.txt", sep="\t")
write.table(good_samples, "samples_to_retain.txt", sep="\t")
write.table(sorted_samples, "samples_sorted_pstacks.txt", sep="\t")
# mean number of loci per pop
mymean <- aggregate(x = mydata$n_loci, by = list(mydata$population), mean)
### Use plyr package to estimate 1% quantile in the data per pop
my01quantile <- ddply(mydata, "population", summarise, pstacks_01_quantile = quantile(n_loci, .01))
mean(my01quantile$pstacks_01_quantile)
## Check up on a subset of individuals
trouble_samples <- mydata[mydata$n_loci<12000,]
good_samples <- mydata[mydata$n_loci>12000,]#Grab a subset of data with low numbers of loci present
# sort by number of loci in each sample (to help pick what individuals should go in the catalog)
sorted_samples <- good_samples[order(good_samples$n_loci),]
write.table(trouble_samples, "samples_to_remove.txt", sep="\t")
write.table(good_samples, "samples_to_retain.txt", sep="\t")
write.table(sorted_samples, "samples_sorted_pstacks.txt", sep="\t")
mean(my01quantile$pstacks_01_quantile)
## Check up on a subset of individuals
trouble_samples <- mydata[mydata$n_loci<17390,]
good_samples <- mydata[mydata$n_loci>17390,]#Grab a subset of data with low numbers of loci present
# sort by number of loci in each sample (to help pick what individuals should go in the catalog)
sorted_samples <- good_samples[order(good_samples$n_loci),]
write.table(trouble_samples, "samples_to_remove.txt", sep="\t")
write.table(good_samples, "samples_to_retain.txt", sep="\t")
write.table(sorted_samples, "samples_sorted_pstacks.txt", sep="\t")
mydata_corr <- read.delim("populations_loci_counts_b8.txt")
#### HEADER SHOULD BE:(tab delimited)
#filename loci  population
View(mydata_corr)
mydata_pop <- read.delim("populations_loci_counts_b8.txt")
#### HEADER SHOULD BE:(tab delimited)
#filename loci  population
View(mydata_pop)
ggplot(mydata_pop,aes(x=n_loci, fill = group)) +
geom_histogram(data = mydata_pop, bins= 20) +
facet_wrap(~population) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
#Read in your datatable from a tab-delimited text file
mydata_corr <- read.delim("populations_corrected_loci_counts_b8.txt")
#### HEADER SHOULD BE:(tab delimited)
#filename loci  population
View(mydata_corr)
ggplot(mydata_corr,aes(x=n_loci, fill = group)) +
geom_histogram(data = mydata_corr, bins= 20) +
facet_wrap(~population) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
#Read in your datatable from a tab-delimited text file
mydata_sstacks <- read.delim("sstacks_loci_counts_b8.txt")
#### HEADER SHOULD BE:(tab delimited)
#filename loci  population
View(mydata_sstacks)
ggplot(mydata_sstacks,aes(x=n_loci, fill = group)) +
geom_histogram(data = mydata_sstacks, bins= 20) +
facet_wrap(~population) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
#Read in your datatable from a tab-delimited text file
mydata_d10 <- read.delim("sstacks_loci_counts_depth10_b8.txt")
#### HEADER SHOULD BE:(tab delimited)
#filename loci  population
View(mydata_d10)
######### using facet_wrap to plot this
ggplot(mydata_d10,aes(x=n_loci, fill = group)) +
geom_histogram(data = mydata_d10, bins= 20) +
facet_wrap(~population) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
