#if(length(where.NA)==0) polygon(c(Positions_LG, rev(Positions_LG)), c(CI_all[,2], rev(CI_all[,3])), col=rgb(0.3,0.1,0.4, 0.5))
positions_to_add=Positions_LG
chromosome=matrix(ijk,length(positions_to_add),1)
to_export_temp=cbind(chromosome,positions_to_add,MAs_exp,CI_all)
to_export_temp=as.data.frame(to_export_temp)
to_export=rbind(to_export,to_export_temp)
}
(P_value = pnorm(Expected_MA, CI_all_chromosomes[,1], Bootstrap_sd))
print (P_value)
to_export=cbind(to_export,P_value)
output<-paste(path_output,'/',name_output,'_kernel_smoothing_',Nb_bootstrap,'_bootstraps_sigma_',Sigma_sliding_window,'_div',division,'.txt', sep='')
colnames(to_export)=c("chromosome","position","Fst/Fct","Mean_boostrap","lower_95","upper_95","pvalue")
print(head(to_export))
write.table(to_export,file=output,quote=FALSE,sep="\t",col.names=TRUE,row.names=FALSE)
}
plotting_reg_interval(Dat = align_data_sorted, Sigma_sliding_window=250000, Nb_bootstrap=100000, which.chromosome.analysis="all",which.chromosome.plot="all",division=150,name_output="batch_8_final_filtered_east_globalFST",path_output=".")
library(ggplot2)
library(dplyr)
setwd("D:/Pacific cod/DataAnalysis/PCod-Compare-repo/analyses/SlidingWindow")
swa_input = read.table("batch_8_SWA_input_east_sorted.txt", header = TRUE, sep = "\t")
head(swa_input)
source("SlidingWindow_FindMarkers_Function.R")
find_markers_in_window(marker_data = swa_input, window_size= 250000, divisions = 150, output = "East_Num_Name_Loci_Per_Window.txt")
all_marker_data <- read.table("East_SWA_Num_Name_Loci_Per_Window.txt", header=FALSE, sep="\t")
head(all_marker_data)
marker_data <- select(all_marker_data, c("V1", "V2", "V3"))
colnames(marker_data) <- c("chrom", "position", "num_markers")
all_marker_data <- read.table("East_Num_Name_Loci_Per_Window.txt", header=FALSE, sep="\t")
head(all_marker_data)
marker_data <- select(all_marker_data, c("V1", "V2", "V3"))
colnames(marker_data) <- c("chrom", "position", "num_markers")
markers_per_window <- marker_data$num_markers
mean(markers_per_window) ## 10.97 / 8.11
qplot(markers_per_window, geom="histogram",
binwidth = 1,
main = "Markers per Sliding Window, West\nAcross All Linkage Groups",
xlab = "# Markers",
ylab = "# Windows") +
annotate("text", x = 25, y = 300, label="Mean:\n7.17")
qplot(markers_per_window, geom="histogram",
binwidth = 1,
main = "Markers per Sliding Window, West\nAcross All Linkage Groups",
xlab = "# Markers",
ylab = "# Windows") +
annotate("text", x = 20, y = 300, label="Mean:\n7.17")
qplot(markers_per_window, geom="histogram",
binwidth = 1,
main = "Markers per Sliding Window, West\nAcross All Linkage Groups",
xlab = "# Markers",
ylab = "# Windows") +
annotate("text", x = 15, y = 300, label="Mean:\n7.17")
qplot(markers_per_window, geom="histogram",
binwidth = 1,
main = "Markers per Sliding Window, East\nAcross All Linkage Groups",
xlab = "# Markers",
ylab = "# Windows") +
annotate("text", x = 15, y = 300, label="Mean:\n7.17")
swa_output = read.table("batch_8_final_filtered_east_globalFST_kernel_smoothing_1e+05_bootstraps_sigma_250000_div150_FILTERED.txt", header = TRUE, sep = "\t")
swa_output = read.table("batch_8_final_filtered_east_globalFST_kernel_smoothing_1e+05_bootstraps_sigma_250000_div150.txt", header = TRUE, sep = "\t")
dim(swa_output)
source("Plot_SlidingWindowAnalysis_Functions.R")
if(length(swa_output$position) != length(markers_per_window)){
print("ERROR: position and marker density vectors are not of equal lengths. you cannot run the just-plot function until you subset markers_per_window.")
} else{print("continue to plotting function.")}
swa_output = read.table("batch_8_final_filtered_east_globalFST_kernel_smoothing_1e+05_bootstraps_sigma_250000_div150_FILTERED.txt", header = TRUE, sep = "\t")
swa_output = read.table("batch_8_final_filtered_east_globalFST_kernel_smoothing_1e+05_bootstraps_sigma_250000_div150_FILTERED.txt", header = TRUE, sep = "\t")
dim(swa_output)
source("Plot_SlidingWindowAnalysis_Functions.R")
if(length(swa_output$position) != length(markers_per_window)){
print("ERROR: position and marker density vectors are not of equal lengths. you cannot run the just-plot function until you subset markers_per_window.")
} else{print("continue to plotting function.")}
just_plot_md(data = swa_output, marker_density = marker_data, Nb_bootstrap=100000, which.chromosome.analysis="all", which.chromosome.plot="all",export = TRUE, name="plots/East/batch_8_east_SWA_filtered")
library(readr)
library(ggplot2)
library(dplyr)
source("SlidingWindow_FindMarkers_Function.R")
source("Plot_SlidingWindowAnalysis_Functions.R")
east <- read_delim("batch_8_final_filtered_east_globalFST_kernel_smoothing_1e+05_bootstraps_sigma_250000_div150_FILTERED.txt", "\t", escape_double = FALSE, trim_ws = TRUE)
head(east)
west <- read_delim("West/batch_8_final_filtered_west_2reg_kernel_smoothing_1e+05_bootstraps_sigma_250000_div150_FILTERED.txt", "\t", escape_double = FALSE, trim_ws = TRUE)
head(west)
east_selection <- east %>%
mutate(positive = ifelse(`Fst/Fct` > upper_95, "1", "0")) %>%
mutate(negative = ifelse(`Fst/Fct` < lower_95, "1", "0")) %>%
mutate(selection = ifelse(positive == 1 | negative == 1, "Yes", "No"))
head(east_selection)
west_selection <- west %>%
mutate(positive = ifelse(`Fst/Fct` > upper_95, "1", "0")) %>%
mutate(negative = ifelse(`Fst/Fct` < lower_95, "1", "0")) %>%
mutate(selection = ifelse(positive == 1 | negative == 1, "Yes", "No"))
head(west_selection)
east_selection <- east %>%
mutate(positive = ifelse(`Fst.Fct` > upper_95, "1", "0")) %>%
mutate(negative = ifelse(`Fst.Fct` < lower_95, "1", "0")) %>%
mutate(selection = ifelse(positive == 1 | negative == 1, "Yes", "No"))
head(east_selection)
west_selection <- west %>%
mutate(positive = ifelse(`Fst.Fct` > upper_95, "1", "0")) %>%
mutate(negative = ifelse(`Fst.Fct` < lower_95, "1", "0")) %>%
mutate(selection = ifelse(positive == 1 | negative == 1, "Yes", "No"))
head(west_selection)
ggplot(data=east_selection, aes(x = `Fst.Fct`, y = upper_95)) +
geom_point(aes(color=positive)) +
ylim(-0.1,1) +
xlim(-0.1,1) +
labs(title="East v. West Sliding Window\nPositive Selection")
## negative selection: Fst below lower 95% confidence interval
ggplot(data=east_selection, aes(x = `Fst.Fct`, y = lower_95)) +
geom_point(aes(color=negative)) +
ylim(-0.1,0.1) +
xlim(-0.1,1) +
labs(title="East v. West Sliding Window\nNegative Selection")
ggplot(data=east_selection, aes(x = `Fst.Fct`, y = lower_95)) +
geom_point(aes(color=negative)) +
labs(title="East Sliding Window\nNegative Selection")
ggplot(data=east_selection, aes(x = `Fst.Fct`, y = upper_95)) +
geom_point(aes(color=positive)) +
labs(title="East Sliding Window\nPositive Selection")
ggplot(data=east_selection, aes(x = `Fst.Fct`, y = pvalue)) +
geom_point(aes(color=selection)) +
ylim(-0.1,1) +
xlim(-0.1,1) +
labs(title="East Sliding Window\nP values")
just_plot_overlay(data1 = east_selection, data2 = west_selection, Nb_divisions = 150, which.chromosome.analysis="all", which.chromosome.plot="all",export = TRUE, name="plots/SWA_East_West_Overlay")
warnings()
colnames(east_selection)
colnames(east_selection) <- c("chromosome","position","Fst/Fct","Mean_boostrap","lower_95","upper_95","pvalue","positive","negative","selection")
colnames(west_selection) <- c("chromosome","position","Fst/Fct","Mean_boostrap","lower_95","upper_95","pvalue","positive","negative","selection")
just_plot_overlay(data1 = east_selection, data2 = west_selection, Nb_divisions = 150, which.chromosome.analysis="all", which.chromosome.plot="all",export = TRUE, name="plots/SWA_East_West_Overlay")
east <- read_delim("batch_8_final_filtered_east_globalFST_matched_kernel_smoothing_1e+05_bootstraps_sigma_250000_div150.txt", "\t", escape_double = FALSE, trim_ws = TRUE)
head(east)
west <- read_delim("West/batch_8_final_filtered_west_matched_kernel_smoothing_1e+05_bootstraps_sigma_250000_div150.txt", "\t", escape_double = FALSE, trim_ws = TRUE)
head(west)
# Add columns for selection -------------------------------------------------------------
east_selection <- east %>%
mutate(positive = ifelse(`Fst.Fct` > upper_95, "1", "0")) %>%
mutate(negative = ifelse(`Fst.Fct` < lower_95, "1", "0")) %>%
mutate(selection = ifelse(positive == 1 | negative == 1, "Yes", "No"))
head(east_selection)
west_selection <- west %>%
mutate(positive = ifelse(`Fst.Fct` > upper_95, "1", "0")) %>%
mutate(negative = ifelse(`Fst.Fct` < lower_95, "1", "0")) %>%
mutate(selection = ifelse(positive == 1 | negative == 1, "Yes", "No"))
head(west_selection)
east_selection <- east %>%
mutate(positive = ifelse(`Fst/Fct` > upper_95, "1", "0")) %>%
mutate(negative = ifelse(`Fst/Fct` < lower_95, "1", "0")) %>%
mutate(selection = ifelse(positive == 1 | negative == 1, "Yes", "No"))
head(east_selection)
west_selection <- west %>%
mutate(positive = ifelse(`Fst/Fct` > upper_95, "1", "0")) %>%
mutate(negative = ifelse(`Fst/Fct` < lower_95, "1", "0")) %>%
mutate(selection = ifelse(positive == 1 | negative == 1, "Yes", "No"))
head(west_selection)
just_plot_overlay(data1 = east_selection, data2 = west_selection, Nb_divisions = 150, which.chromosome.analysis="all", which.chromosome.plot="all",export = TRUE, name="plots/SWA_East_West_MATCHED_Overlay")
east <- read_delim("batch_8_final_filtered_east_globalFST_kernel_smoothing_1e+05_bootstraps_sigma_250000_div150_FILTERED.txt", "\t", escape_double = FALSE, trim_ws = TRUE)
head(east)
# Add columns for selection -------------------------------------------------------------
east_selection <- east %>%
mutate(positive = ifelse(`Fst.Fct` > upper_95, "1", "0")) %>%
mutate(negative = ifelse(`Fst.Fct` < lower_95, "1", "0")) %>%
mutate(selection = ifelse(positive == 1 | negative == 1, "Yes", "No"))
head(east_selection)
east_filter <- east_selection %>%
filter(selection == "Yes")
dim(east_filter)
east_marker_data = read.table("batch_8_final_filtered_aligned_SWA_input_east_sorted.txt", header = TRUE, sep = "\t")
east_marker_data = read.table("batch_8_SWA_input_east_sorted.txt", header = TRUE, sep = "\t")
e_find_markers_output <- read.delim("East_Num_Name_Loci_Per_Window.txt", sep = "\t", header= FALSE, colClasses = c("character", "numeric", "numeric", "character"))
colnames(e_find_markers_output) <- c("chromosome", "position", "num_markers", "loci_names")
View(e_find_markers_output)
e_find_markers_filtered <- filter(e_find_markers_output, position %in% east_filter$position)
dim(e_find_markers_filtered)
View(e_find_markers_filtered)
dim(east_filter)
write.table(e_find_markers_filtered, "East_SWA_SelectionRegions_Markers.txt", sep = "\t",
row.names=FALSE, quote=FALSE)
View(plot_all)
setwd("D:/Pacific cod/DataAnalysis/PCod-Compare-repo/analyses/SlidingWindow")
## input data is the same as for sliding window analysis (the sorted alignment table output as a file in previous script)
swa_input = read.table("batch_8_SWA_input_east_sorted.txt", header = TRUE, sep = "\t")
head(swa_input)
source("SlidingWindow_FindMarkers_Function.R")
swa_output = read.table("batch_8_final_filtered_east_globalFST_kernel_smoothing_1e+05_bootstraps_sigma_250000_div150_FILTERED.txt", header = TRUE, sep = "\t")
dim(swa_output)
source("Plot_SlidingWindowAnalysis_Functions.R")
# options: just_plot_swa; just_plot_md; plot_all; plot_outlier
plot_outliers(data = swa_output, marker_density = output, Nb_bootstrap=100000, Nb_divisions = 150, which.chromosome.analysis="all", which.chromosome.plot="all",export = TRUE, name="plots/East/East_SWA_output_all_loci")
View(plot_all)
View(plot_outliers)
head(swa_input)
plot_outliers(data = swa_output, outlier_data = swa_input, Nb_bootstrap=100000, Nb_divisions = 150, which.chromosome.analysis="all", which.chromosome.plot="all",export = TRUE, name="plots/East/East_SWA_output_all_loci")
install.packages("pcadapt")
devtools::install_github("bcm-uga/pcadapt")
library(ggplot2)
library(dplyr)
bscan_direct <- "D:/Pacific cod/DataAnalysis/PCod-Compare-repo/analyses/R"
#directory with bayescan output (both)
workingdirect <- "D:/Pacific cod/DataAnalysis/PCod-Compare-repo/analyses/outliers"
#fst file (Bayescan script)
fst_file <- "batch_8_eastwest_bypop_Bayescan_p100_output_fst.txt"
#.sel file (Bayescan script)
sel_file <- "batch_8_eastwest_bypop_Bayescan_p100_output.sel"
# output file (both)
outfile <- "batch_8_eastwest_bypop_Bayescan_p100_outliers.csv"
#set false discovery rate cutoff (both)
fdr <- 0.05
#fst file edited to include stacks locus IDs (alt. function)
fst_edit <- "batch_8_eastwest_bypop_Bayescan_p100_fst_stacksIDs.txt"
#plot title (alt. function)
plt.title = "Bayescan Outliers - East v. West (Prior100)"
setwd(bscan_direct)
## source r script with plot function
source("BAYESCAN_plot_R.r")
## set wd to output file location
setwd(workingdirect)
## produce a list of outlier loci, and a plot of fst v. log10(qvalue)
plot_bayescan(fst_file, FDR = fdr) #FDR sets cutoff
workingdirect <- "D:/Pacific cod/DataAnalysis/PCod-Compare-repo/analyses/outliers/Bayescan"
## my r script is in this directory
setwd(bscan_direct)
## source r script with plot function
source("BAYESCAN_plot_R.r")
## set wd to output file location
setwd(workingdirect)
## produce a list of outlier loci, and a plot of fst v. log10(qvalue)
plot_bayescan(fst_file, FDR = fdr) #FDR sets cutoff
po <- log10(fdr)
## set wd to output file location
setwd(workingdirect)
## read in fst file
library(readr)
mydata <- read_delim(fst_edit," ", escape_double = FALSE, trim_ws = TRUE)
## edit infile (because of weird spacing in header lines, from bayescan)
head(mydata)
## add column with log10(q val)
mydata <- mutate(mydata, log10q = log10(mydata$qval))
head(mydata)
min(mydata$log10q)
## add column to identify if loci are outliers or not
mydata <- mutate(mydata, outlier = ifelse(mydata$log10q < po, "True", "False"))
head(mydata)
## output fst file with only outlier loci
outlier_sub <- subset(mydata, outlier == "True")
dim(outlier_sub)
write.csv(outlier_sub, file=outfile, quote=FALSE,  row.names=FALSE)
## plot with ggplot
outliers <- as.factor(mydata$outlier)
base_plot <- ggplot(mydata, aes(x=log10q, y=fst, col=outliers)) +
geom_point(size=2) +
scale_x_reverse(lim=c(0.05,-10)) +
geom_vline(xintercept=po) +
labs(title=plt.title,y="Fst",x="Log10q") +
guides(color="none")
base_plot # if you get an error here about removing data points, increase limit of x axis
po <- log10(fdr)
## set wd to output file location
setwd(workingdirect)
## read in fst file
library(readr)
mydata <- read_delim(fst_edit," ", escape_double = FALSE, trim_ws = TRUE)
## edit infile (because of weird spacing in header lines, from bayescan)
head(mydata)
## add column with log10(q val)
mydata <- mutate(mydata, log10q = log10(mydata$qval))
head(mydata)
min(mydata$log10q)
## add column to identify if loci are outliers or not
mydata <- mutate(mydata, outlier = ifelse(mydata$log10q < po, "True", "False"))
head(mydata)
## output fst file with only outlier loci
outlier_sub <- subset(mydata, outlier == "True")
dim(outlier_sub)
write.csv(outlier_sub, file=outfile, quote=FALSE,  row.names=FALSE)
## plot with ggplot
outliers <- as.factor(mydata$outlier)
base_plot <- ggplot(mydata, aes(x=log10q, y=fst, col=outliers)) +
geom_point(size=2) +
scale_x_reverse(lim=c(0.05,-10)) +
geom_vline(xintercept=po) +
labs(title=plt.title,y="Fst",x="Log10q") +
guides(color="none")
base_plot # if you get an error here about removing data points, increase limit of x axis
#fst file edited to include stacks locus IDs (alt. function)
fst_edit <- "batch_8_eastwest_bypop_Bayescan_p100_fst_stacksIDs.txt"
#plot title (alt. function)
plt.title = "Bayescan Outliers - East v. West (Prior100)"
po <- log10(fdr)
## set wd to output file location
setwd(workingdirect)
## read in fst file
library(readr)
mydata <- read_delim(fst_edit," ", escape_double = FALSE, trim_ws = TRUE)
## edit infile (because of weird spacing in header lines, from bayescan)
head(mydata)
## add column with log10(q val)
mydata <- mutate(mydata, log10q = log10(mydata$qval))
head(mydata)
min(mydata$log10q)
## add column to identify if loci are outliers or not
mydata <- mutate(mydata, outlier = ifelse(mydata$log10q < po, "True", "False"))
head(mydata)
## output fst file with only outlier loci
outlier_sub <- subset(mydata, outlier == "True")
dim(outlier_sub)
write.csv(outlier_sub, file=outfile, quote=FALSE,  row.names=FALSE)
## plot with ggplot
outliers <- as.factor(mydata$outlier)
base_plot <- ggplot(mydata, aes(x=log10q, y=fst, col=outliers)) +
geom_point(size=2) +
scale_x_reverse(lim=c(0.05,-10)) +
geom_vline(xintercept=po) +
labs(title=plt.title,y="Fst",x="Log10q") +
guides(color="none")
base_plot # if you get an error here about removing data points, increase limit of x axis
outliers <- as.factor(mydata$outlier)
base_plot <- ggplot(mydata, aes(x=log10q, y=fst, col=outliers)) +
geom_point(size=2) +
scale_x_reverse(lim=c(0.05,-6)) +
geom_vline(xintercept=po) +
labs(title=plt.title,y="Fst",x="Log10q") +
guides(color="none")
base_plot # if you get an error here about removing data points, increase limit of x axis
bscan_direct <- "D:/Pacific cod/DataAnalysis/PCod-Compare-repo/analyses/R"
#directory with bayescan output (both)
workingdirect <- "D:/Pacific cod/DataAnalysis/PCod-Compare-repo/analyses/outliers/Bayescan"
#fst file (Bayescan script)
fst_file <- "batch_8_eastwest_bypop_Bayescan_p1K_output_fst.txt"
#.sel file (Bayescan script)
sel_file <- "batch_8_eastwest_bypop_Bayescan_p1K_output.sel"
# output file (both)
outfile <- "batch_8_eastwest_bypop_Bayescan_p1K_outliers.csv"
#set false discovery rate cutoff (both)
fdr <- 0.05
#fst file edited to include stacks locus IDs (alt. function)
fst_edit <- "batch_8_eastwest_bypop_Bayescan_p1K_fst_stacksIDs.txt"
#plot title (alt. function)
plt.title = "Bayescan Outliers - East v. West (Prior1000)"
po <- log10(fdr)
## set wd to output file location
setwd(workingdirect)
## read in fst file
library(readr)
mydata <- read_delim(fst_edit," ", escape_double = FALSE, trim_ws = TRUE)
## edit infile (because of weird spacing in header lines, from bayescan)
head(mydata)
## add column with log10(q val)
mydata <- mutate(mydata, log10q = log10(mydata$qval))
head(mydata)
min(mydata$log10q)
## add column to identify if loci are outliers or not
mydata <- mutate(mydata, outlier = ifelse(mydata$log10q < po, "True", "False"))
head(mydata)
## output fst file with only outlier loci
outlier_sub <- subset(mydata, outlier == "True")
dim(outlier_sub)
write.csv(outlier_sub, file=outfile, quote=FALSE,  row.names=FALSE)
## plot with ggplot
outliers <- as.factor(mydata$outlier)
base_plot <- ggplot(mydata, aes(x=log10q, y=fst, col=outliers)) +
geom_point(size=2) +
scale_x_reverse(lim=c(0.05,-6)) +
geom_vline(xintercept=po) +
labs(title=plt.title,y="Fst",x="Log10q") +
guides(color="none")
base_plot # if you get an error here about removing data points, increase limit of x axis
setwd(bscan_direct)
## source r script with plot function
source("BAYESCAN_plot_R.r")
## set wd to output file location
setwd(workingdirect)
## produce a list of outlier loci, and a plot of fst v. log10(qvalue)
plot_bayescan(fst_file, FDR = fdr) #FDR sets cutoff
#directory with bayescan plotting script (Bayescan script)
bscan_direct <- "D:/Pacific cod/DataAnalysis/PCod-Compare-repo/analyses/R"
#directory with bayescan output (both)
workingdirect <- "D:/Pacific cod/DataAnalysis/PCod-Compare-repo/analyses/outliers/Bayescan"
#fst file (Bayescan script)
fst_file <- "batch_8_east_coastal_Bayescan_p1K_output_fst.txt"
#.sel file (Bayescan script)
sel_file <- "batch_8_east_coastal_Bayescan_p1K_output.sel"
# output file (both)
outfile <- "batch_8_east_coastal_Bayescan_p1K_outliers.csv"
#set false discovery rate cutoff (both)
fdr <- 0.05
#fst file edited to include stacks locus IDs (alt. function)
fst_edit <- "batch_8_east_coastal_Bayescan_p1K_fst_stacksIDs.txt"
#plot title (alt. function)
plt.title = "Bayescan Outliers - East (Prior1000)"
## my r script is in this directory
setwd(bscan_direct)
## source r script with plot function
source("BAYESCAN_plot_R.r")
## set wd to output file location
setwd(workingdirect)
## produce a list of outlier loci, and a plot of fst v. log10(qvalue)
plot_bayescan(fst_file, FDR = fdr) #FDR sets cutoff
po <- log10(fdr)
## set wd to output file location
setwd(workingdirect)
## read in fst file
library(readr)
mydata <- read_delim(fst_edit," ", escape_double = FALSE, trim_ws = TRUE)
## edit infile (because of weird spacing in header lines, from bayescan)
head(mydata)
## add column with log10(q val)
mydata <- mutate(mydata, log10q = log10(mydata$qval))
head(mydata)
min(mydata$log10q)
## add column to identify if loci are outliers or not
mydata <- mutate(mydata, outlier = ifelse(mydata$log10q < po, "True", "False"))
head(mydata)
## output fst file with only outlier loci
outlier_sub <- subset(mydata, outlier == "True")
dim(outlier_sub)
write.csv(outlier_sub, file=outfile, quote=FALSE,  row.names=FALSE)
## plot with ggplot
outliers <- as.factor(mydata$outlier)
base_plot <- ggplot(mydata, aes(x=log10q, y=fst, col=outliers)) +
geom_point(size=2) +
scale_x_reverse(lim=c(0.05,-6)) +
geom_vline(xintercept=po) +
labs(title=plt.title,y="Fst",x="Log10q") +
guides(color="none")
base_plot # if you get an error here about removing data points, increase limit of x axis
labels <- c()
for(i in seq(1, length(mydata$outlier))){
if(mydata$outlier[i] == "True"){
labels <- c(labels, mydata$locus[i])
} else{labels <- c(labels,"")}
}
base_plot +
geom_text(aes(label=labels), hjust = 1.1, vjust = -.1)
labels <- c()
for(i in seq(1, length(mydata$outlier))){
if(mydata$outlier[i] == "True"){
labels <- c(labels, mydata$locus[i])
} else{labels <- c(labels,"")}
}
base_plot +
geom_text(aes(label=labels), hjust = 1.1, vjust = -.1)
bscan_direct <- "D:/Pacific cod/DataAnalysis/PCod-Compare-repo/analyses/R"
#directory with bayescan output (both)
workingdirect <- "D:/Pacific cod/DataAnalysis/PCod-Compare-repo/analyses/outliers/Bayescan"
#fst file (Bayescan script)
fst_file <- "batch_8_east_coastal_Bayescan_p100_output_fst.txt"
#.sel file (Bayescan script)
sel_file <- "batch_8_east_coastal_Bayescan_p100_output.sel"
# output file (both)
outfile <- "batch_8_east_coastal_Bayescan_p100_outliers.csv"
#set false discovery rate cutoff (both)
fdr <- 0.05
#fst file edited to include stacks locus IDs (alt. function)
fst_edit <- "batch_8_east_coastal_Bayescan_p100_fst_stacksIDs.txt"
#plot title (alt. function)
plt.title = "Bayescan Outliers - East (Prior100)"
setwd(bscan_direct)
## source r script with plot function
source("BAYESCAN_plot_R.r")
## set wd to output file location
setwd(workingdirect)
## produce a list of outlier loci, and a plot of fst v. log10(qvalue)
plot_bayescan(fst_file, FDR = fdr) #FDR sets cutoff
po <- log10(fdr)
## set wd to output file location
setwd(workingdirect)
## read in fst file
library(readr)
mydata <- read_delim(fst_edit," ", escape_double = FALSE, trim_ws = TRUE)
## edit infile (because of weird spacing in header lines, from bayescan)
head(mydata)
## add column with log10(q val)
mydata <- mutate(mydata, log10q = log10(mydata$qval))
head(mydata)
min(mydata$log10q)
## add column to identify if loci are outliers or not
mydata <- mutate(mydata, outlier = ifelse(mydata$log10q < po, "True", "False"))
head(mydata)
## output fst file with only outlier loci
outlier_sub <- subset(mydata, outlier == "True")
dim(outlier_sub)
write.csv(outlier_sub, file=outfile, quote=FALSE,  row.names=FALSE)
## plot with ggplot
outliers <- as.factor(mydata$outlier)
base_plot <- ggplot(mydata, aes(x=log10q, y=fst, col=outliers)) +
geom_point(size=2) +
scale_x_reverse(lim=c(0.05,-6)) +
geom_vline(xintercept=po) +
labs(title=plt.title,y="Fst",x="Log10q") +
guides(color="none")
base_plot # if you get an error here about removing data points, increase limit of x axis
## plot with ggplot, with labels
labels <- c()
for(i in seq(1, length(mydata$outlier))){
if(mydata$outlier[i] == "True"){
labels <- c(labels, mydata$locus[i])
} else{labels <- c(labels,"")}
}
base_plot +
geom_text(aes(label=labels), hjust = 1.1, vjust = -.1)
library(TTR)
library(zoo) # don't need to install; will install with TTR
setwd("D:/Pacific cod/DataAnalysis/PCod-Compare-repo/analyses/SlidingWindow")
swa_het_output_east <- read.delim("Heterozygosity/batch_8_final_filtered_east_HETEROZYGOSITY_kernel_smoothing_1e+05_bootstraps_sigma_250000_div150.txt")
head(swa_het_output_east)
swa_het_output_west <- read.delim("Heterozygosity/batch_8_final_filtered_west_HETEROZYGOSITY_kernel_smoothing_1e+05_bootstraps_sigma_250000_div150.txt")
head(swa_het_output_west)
plot_het_overlay(data1 = swa_het_output_east, data2 = swa_het_output_west, legend.text.data1 = "East", legend.text.data2 = "West", Nb_bootstrap=100000, Nb_divisions = 150, which.chromosome.analysis="all", which.chromosome.plot="all",export = TRUE, name="SWA_Het_East_West_overlay")
source("Plot_SlidingWindowAnalysis_Functions.R")
plot_het_overlay(data1 = swa_het_output_east, data2 = swa_het_output_west, legend.text.data1 = "East", legend.text.data2 = "West", Nb_bootstrap=100000, Nb_divisions = 150, which.chromosome.analysis="all", which.chromosome.plot="all",export = TRUE, name="SWA_Het_East_West_overlay")
source("Plot_SlidingWindowAnalysis_Functions.R")
plot_het_overlay(data1 = swa_het_output_east, data2 = swa_het_output_west, legend.text.data1 = "East", legend.text.data2 = "West", Nb_bootstrap=100000, Nb_divisions = 150, which.chromosome.analysis="all", which.chromosome.plot="all",export = TRUE, name="SWA_Het_East_West_overlay")
