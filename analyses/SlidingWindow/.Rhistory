create_scale_bar <- function(lon,lat,distance_lon,distance_lat,distance_legend, dist_units = "km"){
# First rectangle
bottom_right <- gcDestination(lon = lon, lat = lat, bearing = 90, dist = distance_lon, dist.units = dist_units, model = "WGS84")
topLeft <- gcDestination(lon = lon, lat = lat, bearing = 0, dist = distance_lat, dist.units = dist_units, model = "WGS84")
rectangle <- cbind(lon=c(lon, lon, bottom_right[1,"long"], bottom_right[1,"long"], lon),
lat = c(lat, topLeft[1,"lat"], topLeft[1,"lat"],lat, lat))
rectangle <- data.frame(rectangle, stringsAsFactors = FALSE)
# Second rectangle t right of the first rectangle
bottom_right2 <- gcDestination(lon = lon, lat = lat, bearing = 90, dist = distance_lon*2, dist.units = dist_units, model = "WGS84")
rectangle2 <- cbind(lon = c(bottom_right[1,"long"], bottom_right[1,"long"], bottom_right2[1,"long"], bottom_right2[1,"long"], bottom_right[1,"long"]),
lat=c(lat, topLeft[1,"lat"], topLeft[1,"lat"], lat, lat))
rectangle2 <- data.frame(rectangle2, stringsAsFactors = FALSE)
# Now let's deal with the text
on_top <- gcDestination(lon = lon, lat = lat, bearing = 0, dist = distance_legend, dist.units = dist_units, model = "WGS84")
on_top2 <- on_top3 <- on_top
on_top2[1,"long"] <- bottom_right[1,"long"]
on_top3[1,"long"] <- bottom_right2[1,"long"]
legend <- rbind(on_top, on_top2, on_top3)
legend <- data.frame(cbind(legend, text = c(0, distance_lon, distance_lon*2)), stringsAsFactors = FALSE, row.names = NULL)
return(list(rectangle = rectangle, rectangle2 = rectangle2, legend = legend))
}
#We also need a function to obtain the coordinates of the North arrow:
#
# Result #
#--------#
# Result #
#--------#
# Returns a list containing :
#	- res : coordinates to draw an arrow ;
#	- coordinates of the middle of the arrow (where the "N" will be plotted).
#
# Arguments : #
#-------------#
# scale_bar : result of create_scale_bar() ;
# length : desired length of the arrow ;
# distance : distance between legend rectangles and the bottom of the arrow ;
# dist_units : units of distance "km" (kilometers) (default), "nm" (nautical miles), "mi" (statute miles).
create_orientation_arrow <- function(scale_bar, length, distance = 1, dist_units = "km"){
lon <- scale_bar$rectangle2[1,1]
lat <- scale_bar$rectangle2[1,2]
# Bottom point of the arrow
beg_point <- gcDestination(lon = lon, lat = lat, bearing = 0, dist = distance, dist.units = dist_units, model = "WGS84")
lon <- beg_point[1,"long"]
lat <- beg_point[1,"lat"]
# Let us create the endpoint
on_top <- gcDestination(lon = lon, lat = lat, bearing = 0, dist = length, dist.units = dist_units, model = "WGS84")
left_arrow <- gcDestination(lon = on_top[1,"long"], lat = on_top[1,"lat"], bearing = 225, dist = length/5, dist.units = dist_units, model = "WGS84")
right_arrow <- gcDestination(lon = on_top[1,"long"], lat = on_top[1,"lat"], bearing = 135, dist = length/5, dist.units = dist_units, model = "WGS84")
res <- rbind(
cbind(x = lon, y = lat, xend = on_top[1,"long"], yend = on_top[1,"lat"]),
cbind(x = left_arrow[1,"long"], y = left_arrow[1,"lat"], xend = on_top[1,"long"], yend = on_top[1,"lat"]),
cbind(x = right_arrow[1,"long"], y = right_arrow[1,"lat"], xend = on_top[1,"long"], yend = on_top[1,"lat"]))
res <- as.data.frame(res, stringsAsFactors = FALSE)
# Coordinates from which "N" will be plotted
coords_n <- cbind(x = lon, y = (lat + on_top[1,"lat"])/2)
return(list(res = res, coords_n = coords_n))
}
#The last function enables the user to draw the elements:
#
# Result #
#--------#
# This function enables to draw a scale bar on a ggplot object, and optionally an orientation arrow #
# Arguments : #
#-------------#
# lon, lat : longitude and latitude of the bottom left point of the first rectangle to draw ;
# distance_lon : length of each rectangle ;
# distance_lat : width of each rectangle ;
# distance_legend : distance between rectangles and legend texts ;
# dist_units : units of distance "km" (kilometers) (by default), "nm" (nautical miles), "mi" (statute miles) ;
# rec_fill, rec2_fill : filling colour of the rectangles (default to white, and black, resp.);
# rec_colour, rec2_colour : colour of the rectangles (default to black for both);
# legend_colour : legend colour (default to black);
# legend_size : legend size (default to 3);
# orientation : (boolean) if TRUE (default), adds an orientation arrow to the plot ;
# arrow_length : length of the arrow (default to 500 km) ;
# arrow_distance : distance between the scale bar and the bottom of the arrow (default to 300 km) ;
# arrow_north_size : size of the "N" letter (default to 6).
scale_bar <- function(lon, lat, distance_lon, distance_lat, distance_legend, dist_unit = "km", rec_fill = "white", rec_colour = "black", rec2_fill = "black", rec2_colour = "black", legend_colour = "black", legend_size = 3, orientation = TRUE, arrow_length = 500, arrow_distance = 300, arrow_north_size = 6){
the_scale_bar <- create_scale_bar(lon = lon, lat = lat, distance_lon = distance_lon, distance_lat = distance_lat, distance_legend = distance_legend, dist_unit = dist_unit)
# First rectangle
rectangle1 <- geom_polygon(data = the_scale_bar$rectangle, aes(x = lon, y = lat), fill = rec_fill, colour = rec_colour)
# Second rectangle
rectangle2 <- geom_polygon(data = the_scale_bar$rectangle2, aes(x = lon, y = lat), fill = rec2_fill, colour = rec2_colour)
# Legend
scale_bar_legend <- annotate("text", label = paste(the_scale_bar$legend[,"text"], dist_unit, sep=""), x = the_scale_bar$legend[,"long"], y = the_scale_bar$legend[,"lat"], size = legend_size, colour = legend_colour)
res <- list(rectangle1, rectangle2, scale_bar_legend)
if(orientation){# Add an arrow pointing North
coords_arrow <- create_orientation_arrow(scale_bar = the_scale_bar, length = arrow_length, distance = arrow_distance, dist_unit = dist_unit)
arrow <- list(geom_segment(data = coords_arrow$res, aes(x = x, y = y, xend = xend, yend = yend)), annotate("text", label = "N", x = coords_arrow$coords_n[1,"x"], y = coords_arrow$coords_n[1,"y"], size = arrow_north_size, colour = "black"))
res <- c(res, arrow)
}
return(res)
}
##########################################################################################################
ak_colors <- c("yellow", "#feb24c", "#fd8d3c", "#f03b20", "#bd0026","firebrick4")
ggplot() +
geom_polygon(data = USA, aes(x=long, y = lat, group = group), fill=" grey37", alpha=0.3) +
geom_polygon(data = Canada, aes(x=long, y = lat, group = group), fill=" grey17", alpha=0.3)+
geom_point(data=my_data, aes(x=longitude, y=latitude, color = Sampling.Site), size = 7, alpha = 0.7) +
theme(panel.background = element_rect(fill = "aliceblue"),
panel.grid.major = element_line(colour = NA),
axis.text=element_text(size=12),
axis.title =element_text(size=14),
legend.title=element_text(size=12),
legend.text=element_text(size=12))  +
coord_map(xlim= c(-119, -180),  ylim = c(46,65)) +
labs(x = "Longitude", y = "Latitude") +
scale_color_manual(values=ak_colors) +
#geom_text_repel( data= my_data, aes(x=longitude, y=latitude, label=Sampling.Site), size=4) +
scale_bar(lon = -150, lat = 47.3,
distance_lon = 300, distance_lat = 15, distance_legend = 100,
dist_unit = "km", orientation = FALSE)
ak_colors <- c("yellow", "#feb24c", "#fd8d3c", "#f03b20", "#bd0026","firebrick4")
ggplot() +
geom_polygon(data = USA, aes(x=long, y = lat, group = group), fill=" grey37", alpha=0.3) +
geom_polygon(data = Canada, aes(x=long, y = lat, group = group), fill=" grey17", alpha=0.3)+
geom_point(data=my_data, aes(x=longitude, y=latitude, color = Sampling.Site), size = 7, alpha = 0.7) +
theme(panel.background = element_rect(fill = "aliceblue"),
panel.grid.major = element_line(colour = NA),
axis.text=element_text(size=12),
axis.title =element_text(size=14),
legend.title=element_text(size=12),
legend.text=element_text(size=12))  +
coord_map(xlim= c(-119, -180),  ylim = c(46,65)) +
labs(x = "Longitude", y = "Latitude") +
scale_color_manual(values=ak_colors) +
#geom_text_repel( data= my_data, aes(x=longitude, y=latitude, label=Sampling.Site), size=4) +
scale_bar(lon = -150, lat = 47.3,
distance_lon = 300, distance_lat = 15, distance_legend = 100,
dist_unit = "km", orientation = FALSE)
USA <- map_data("world") %>%
filter(region=="USA")
Canada <- map_data("world") %>%
filter(region=="Canada")
S_Korea <- map_data("world") %>%
filter(region=="South Korea")
N_Korea <- map_data("world") %>%
filter(region=="North Korea")
China <- map_data("world") %>%
filter(region=="China")
Japan <- map_data("world") %>%
filter(region=="Japan")
Sampling.Site <- c("Washington Coast", "Hecate Strait", "Prince William Sound", "Kodiak Island", "Unimak Pass", "Adak Island")
Region <- c("Alaska", "Alaska", "Alaska", "Alaska", "Alaska", "Alaska")
latitude <- c(47.917, 53.217, 60.53, 57.8, 54.63, 51.67)
longitude <- c(-125.55,-130.95,-147.07,-152.517,-168.167,-176.67)
my_data <- data.frame(Sampling.Site, latitude, longitude, Region)
########################################################################################################
# THESE ARE THE FUNCTIONS YOU NEED TO MAKE THE SCALE BAR
#The code in the chunk below was written by Ewen Gallic (bless his heart for being so sharing).
# Result #
#--------#
# Return a list whose elements are :
# 	- rectangle : a data.frame containing the coordinates to draw the first rectangle ;
# 	- rectangle2 : a data.frame containing the coordinates to draw the second rectangle ;
# 	- legend : a data.frame containing the coordinates of the legend texts, and the texts as well.
#
# Arguments : #
#-------------#
# lon, lat : longitude and latitude of the bottom left point of the first rectangle to draw ;
# distance_lon : length of each rectangle ;
# distance_lat : width of each rectangle ;
# distance_legend : distance between rectangles and legend texts ;
# dist_units : units of distance "km" (kilometers) (default), "nm" (nautical miles), "mi" (statute miles).
create_scale_bar <- function(lon,lat,distance_lon,distance_lat,distance_legend, dist_units = "km"){
# First rectangle
bottom_right <- gcDestination(lon = lon, lat = lat, bearing = 90, dist = distance_lon, dist.units = dist_units, model = "WGS84")
topLeft <- gcDestination(lon = lon, lat = lat, bearing = 0, dist = distance_lat, dist.units = dist_units, model = "WGS84")
rectangle <- cbind(lon=c(lon, lon, bottom_right[1,"long"], bottom_right[1,"long"], lon),
lat = c(lat, topLeft[1,"lat"], topLeft[1,"lat"],lat, lat))
rectangle <- data.frame(rectangle, stringsAsFactors = FALSE)
# Second rectangle t right of the first rectangle
bottom_right2 <- gcDestination(lon = lon, lat = lat, bearing = 90, dist = distance_lon*2, dist.units = dist_units, model = "WGS84")
rectangle2 <- cbind(lon = c(bottom_right[1,"long"], bottom_right[1,"long"], bottom_right2[1,"long"], bottom_right2[1,"long"], bottom_right[1,"long"]),
lat=c(lat, topLeft[1,"lat"], topLeft[1,"lat"], lat, lat))
rectangle2 <- data.frame(rectangle2, stringsAsFactors = FALSE)
# Now let's deal with the text
on_top <- gcDestination(lon = lon, lat = lat, bearing = 0, dist = distance_legend, dist.units = dist_units, model = "WGS84")
on_top2 <- on_top3 <- on_top
on_top2[1,"long"] <- bottom_right[1,"long"]
on_top3[1,"long"] <- bottom_right2[1,"long"]
legend <- rbind(on_top, on_top2, on_top3)
legend <- data.frame(cbind(legend, text = c(0, distance_lon, distance_lon*2)), stringsAsFactors = FALSE, row.names = NULL)
return(list(rectangle = rectangle, rectangle2 = rectangle2, legend = legend))
}
#We also need a function to obtain the coordinates of the North arrow:
#
# Result #
#--------#
# Result #
#--------#
# Returns a list containing :
#	- res : coordinates to draw an arrow ;
#	- coordinates of the middle of the arrow (where the "N" will be plotted).
#
# Arguments : #
#-------------#
# scale_bar : result of create_scale_bar() ;
# length : desired length of the arrow ;
# distance : distance between legend rectangles and the bottom of the arrow ;
# dist_units : units of distance "km" (kilometers) (default), "nm" (nautical miles), "mi" (statute miles).
create_orientation_arrow <- function(scale_bar, length, distance = 1, dist_units = "km"){
lon <- scale_bar$rectangle2[1,1]
lat <- scale_bar$rectangle2[1,2]
# Bottom point of the arrow
beg_point <- gcDestination(lon = lon, lat = lat, bearing = 0, dist = distance, dist.units = dist_units, model = "WGS84")
lon <- beg_point[1,"long"]
lat <- beg_point[1,"lat"]
# Let us create the endpoint
on_top <- gcDestination(lon = lon, lat = lat, bearing = 0, dist = length, dist.units = dist_units, model = "WGS84")
left_arrow <- gcDestination(lon = on_top[1,"long"], lat = on_top[1,"lat"], bearing = 225, dist = length/5, dist.units = dist_units, model = "WGS84")
right_arrow <- gcDestination(lon = on_top[1,"long"], lat = on_top[1,"lat"], bearing = 135, dist = length/5, dist.units = dist_units, model = "WGS84")
res <- rbind(
cbind(x = lon, y = lat, xend = on_top[1,"long"], yend = on_top[1,"lat"]),
cbind(x = left_arrow[1,"long"], y = left_arrow[1,"lat"], xend = on_top[1,"long"], yend = on_top[1,"lat"]),
cbind(x = right_arrow[1,"long"], y = right_arrow[1,"lat"], xend = on_top[1,"long"], yend = on_top[1,"lat"]))
res <- as.data.frame(res, stringsAsFactors = FALSE)
# Coordinates from which "N" will be plotted
coords_n <- cbind(x = lon, y = (lat + on_top[1,"lat"])/2)
return(list(res = res, coords_n = coords_n))
}
#The last function enables the user to draw the elements:
#
# Result #
#--------#
# This function enables to draw a scale bar on a ggplot object, and optionally an orientation arrow #
# Arguments : #
#-------------#
# lon, lat : longitude and latitude of the bottom left point of the first rectangle to draw ;
# distance_lon : length of each rectangle ;
# distance_lat : width of each rectangle ;
# distance_legend : distance between rectangles and legend texts ;
# dist_units : units of distance "km" (kilometers) (by default), "nm" (nautical miles), "mi" (statute miles) ;
# rec_fill, rec2_fill : filling colour of the rectangles (default to white, and black, resp.);
# rec_colour, rec2_colour : colour of the rectangles (default to black for both);
# legend_colour : legend colour (default to black);
# legend_size : legend size (default to 3);
# orientation : (boolean) if TRUE (default), adds an orientation arrow to the plot ;
# arrow_length : length of the arrow (default to 500 km) ;
# arrow_distance : distance between the scale bar and the bottom of the arrow (default to 300 km) ;
# arrow_north_size : size of the "N" letter (default to 6).
scale_bar <- function(lon, lat, distance_lon, distance_lat, distance_legend, dist_unit = "km", rec_fill = "white", rec_colour = "black", rec2_fill = "black", rec2_colour = "black", legend_colour = "black", legend_size = 3, orientation = TRUE, arrow_length = 500, arrow_distance = 300, arrow_north_size = 6){
the_scale_bar <- create_scale_bar(lon = lon, lat = lat, distance_lon = distance_lon, distance_lat = distance_lat, distance_legend = distance_legend, dist_unit = dist_unit)
# First rectangle
rectangle1 <- geom_polygon(data = the_scale_bar$rectangle, aes(x = lon, y = lat), fill = rec_fill, colour = rec_colour)
# Second rectangle
rectangle2 <- geom_polygon(data = the_scale_bar$rectangle2, aes(x = lon, y = lat), fill = rec2_fill, colour = rec2_colour)
# Legend
scale_bar_legend <- annotate("text", label = paste(the_scale_bar$legend[,"text"], dist_unit, sep=""), x = the_scale_bar$legend[,"long"], y = the_scale_bar$legend[,"lat"], size = legend_size, colour = legend_colour)
res <- list(rectangle1, rectangle2, scale_bar_legend)
if(orientation){# Add an arrow pointing North
coords_arrow <- create_orientation_arrow(scale_bar = the_scale_bar, length = arrow_length, distance = arrow_distance, dist_unit = dist_unit)
arrow <- list(geom_segment(data = coords_arrow$res, aes(x = x, y = y, xend = xend, yend = yend)), annotate("text", label = "N", x = coords_arrow$coords_n[1,"x"], y = coords_arrow$coords_n[1,"y"], size = arrow_north_size, colour = "black"))
res <- c(res, arrow)
}
return(res)
}
##########################################################################################################
# MAKE SOME PLOTS!!!!
ak_colors <- c("yellow", "#feb24c", "#fd8d3c", "#f03b20", "#bd0026","firebrick4")
ggplot() +
geom_polygon(data = USA, aes(x=long, y = lat, group = group), fill=" grey37", alpha=0.3) +
geom_polygon(data = Canada, aes(x=long, y = lat, group = group), fill=" grey17", alpha=0.3)+
geom_point(data=my_data, aes(x=longitude, y=latitude, color = Sampling.Site), size = 7, alpha = 0.7) +
theme(panel.background = element_rect(fill = "aliceblue"),
panel.grid.major = element_line(colour = NA),
axis.text=element_text(size=12),
axis.title =element_text(size=14),
legend.title=element_text(size=12),
legend.text=element_text(size=12))  +
coord_map(xlim= c(-119, -180),  ylim = c(46,65)) +
labs(x = "Longitude", y = "Latitude") +
scale_color_manual(values=ak_colors) +
#geom_text_repel( data= my_data, aes(x=longitude, y=latitude, label=Sampling.Site), size=4) +
scale_bar(lon = -150, lat = 47.3,
distance_lon = 300, distance_lat = 15, distance_legend = 100,
dist_unit = "km", orientation = FALSE)
#dev.off()
ak_colors <- c("#f03b20", "firebrick4", "yellow", "#feb24c", "#fd8d3c", "#bd0026")
ggplot() +
geom_polygon(data = USA, aes(x=long, y = lat, group = group), fill=" grey37", alpha=0.3) +
geom_polygon(data = Canada, aes(x=long, y = lat, group = group), fill=" grey17", alpha=0.3)+
geom_point(data=my_data, aes(x=longitude, y=latitude, color = Sampling.Site), size = 7, alpha = 0.7) +
theme(panel.background = element_rect(fill = "aliceblue"),
panel.grid.major = element_line(colour = NA),
axis.text=element_text(size=12),
axis.title =element_text(size=14),
legend.title=element_text(size=12),
legend.text=element_text(size=12))  +
coord_map(xlim= c(-119, -180),  ylim = c(46,65)) +
labs(x = "Longitude", y = "Latitude") +
scale_color_manual(values=ak_colors) +
#geom_text_repel( data= my_data, aes(x=longitude, y=latitude, label=Sampling.Site), size=4) +
scale_bar(lon = -150, lat = 47.3,
distance_lon = 300, distance_lat = 15, distance_legend = 100,
dist_unit = "km", orientation = FALSE)
ak_colors <- c("#f03b20", "firebrick4", "yellow", "#feb24c", "#fd8d3c", "yellow")
ggplot() +
geom_polygon(data = USA, aes(x=long, y = lat, group = group), fill=" grey37", alpha=0.3) +
geom_polygon(data = Canada, aes(x=long, y = lat, group = group), fill=" grey17", alpha=0.3)+
geom_point(data=my_data, aes(x=longitude, y=latitude, color = Sampling.Site), size = 7, alpha = 0.7) +
theme(panel.background = element_rect(fill = "aliceblue"),
panel.grid.major = element_line(colour = NA),
axis.text=element_text(size=12),
axis.title =element_text(size=14),
legend.title=element_text(size=12),
legend.text=element_text(size=12))  +
coord_map(xlim= c(-119, -180),  ylim = c(46,65)) +
labs(x = "Longitude", y = "Latitude") +
scale_color_manual(values=ak_colors) +
#geom_text_repel( data= my_data, aes(x=longitude, y=latitude, label=Sampling.Site), size=4) +
scale_bar(lon = -150, lat = 47.3,
distance_lon = 300, distance_lat = 15, distance_legend = 100,
dist_unit = "km", orientation = FALSE)
ak_colors <- c("#f03b20", "firebrick4", "#fd8d3c", "#feb24c", "#fd8d3c", "yellow")
ggplot() +
geom_polygon(data = USA, aes(x=long, y = lat, group = group), fill=" grey37", alpha=0.3) +
geom_polygon(data = Canada, aes(x=long, y = lat, group = group), fill=" grey17", alpha=0.3)+
geom_point(data=my_data, aes(x=longitude, y=latitude, color = Sampling.Site), size = 7, alpha = 0.7) +
theme(panel.background = element_rect(fill = "aliceblue"),
panel.grid.major = element_line(colour = NA),
axis.text=element_text(size=12),
axis.title =element_text(size=14),
legend.title=element_text(size=12),
legend.text=element_text(size=12))  +
coord_map(xlim= c(-119, -180),  ylim = c(46,65)) +
labs(x = "Longitude", y = "Latitude") +
scale_color_manual(values=ak_colors) +
#geom_text_repel( data= my_data, aes(x=longitude, y=latitude, label=Sampling.Site), size=4) +
scale_bar(lon = -150, lat = 47.3,
distance_lon = 300, distance_lat = 15, distance_legend = 100,
dist_unit = "km", orientation = FALSE)
ak_colors <- c("#f03b20", "firebrick4", "#fd8d3c", "#feb24c", "#f03b20", "yellow")
ggplot() +
geom_polygon(data = USA, aes(x=long, y = lat, group = group), fill=" grey37", alpha=0.3) +
geom_polygon(data = Canada, aes(x=long, y = lat, group = group), fill=" grey17", alpha=0.3)+
geom_point(data=my_data, aes(x=longitude, y=latitude, color = Sampling.Site), size = 7, alpha = 0.7) +
theme(panel.background = element_rect(fill = "aliceblue"),
panel.grid.major = element_line(colour = NA),
axis.text=element_text(size=12),
axis.title =element_text(size=14),
legend.title=element_text(size=12),
legend.text=element_text(size=12))  +
coord_map(xlim= c(-119, -180),  ylim = c(46,65)) +
labs(x = "Longitude", y = "Latitude") +
scale_color_manual(values=ak_colors) +
#geom_text_repel( data= my_data, aes(x=longitude, y=latitude, label=Sampling.Site), size=4) +
scale_bar(lon = -150, lat = 47.3,
distance_lon = 300, distance_lat = 15, distance_legend = 100,
dist_unit = "km", orientation = FALSE)
ak_colors <- c("firebrick4", "firebrick4", "#fd8d3c", "#feb24c", "#f03b20", "yellow")
ggplot() +
geom_polygon(data = USA, aes(x=long, y = lat, group = group), fill=" grey37", alpha=0.3) +
geom_polygon(data = Canada, aes(x=long, y = lat, group = group), fill=" grey17", alpha=0.3)+
geom_point(data=my_data, aes(x=longitude, y=latitude, color = Sampling.Site), size = 7, alpha = 0.7) +
theme(panel.background = element_rect(fill = "aliceblue"),
panel.grid.major = element_line(colour = NA),
axis.text=element_text(size=12),
axis.title =element_text(size=14),
legend.title=element_text(size=12),
legend.text=element_text(size=12))  +
coord_map(xlim= c(-119, -180),  ylim = c(46,65)) +
labs(x = "Longitude", y = "Latitude") +
scale_color_manual(values=ak_colors) +
#geom_text_repel( data= my_data, aes(x=longitude, y=latitude, label=Sampling.Site), size=4) +
scale_bar(lon = -150, lat = 47.3,
distance_lon = 300, distance_lat = 15, distance_legend = 100,
dist_unit = "km", orientation = FALSE)
ak_colors <- c("firebrick4", "#f03b20", "#fd8d3c", "#feb24c", "#bd0026", "yellow")
ggplot() +
geom_polygon(data = USA, aes(x=long, y = lat, group = group), fill=" grey37", alpha=0.3) +
geom_polygon(data = Canada, aes(x=long, y = lat, group = group), fill=" grey17", alpha=0.3)+
geom_point(data=my_data, aes(x=longitude, y=latitude, color = Sampling.Site), size = 7, alpha = 0.7) +
theme(panel.background = element_rect(fill = "aliceblue"),
panel.grid.major = element_line(colour = NA),
axis.text=element_text(size=12),
axis.title =element_text(size=14),
legend.title=element_text(size=12),
legend.text=element_text(size=12))  +
coord_map(xlim= c(-119, -180),  ylim = c(46,65)) +
labs(x = "Longitude", y = "Latitude") +
scale_color_manual(values=ak_colors) +
#geom_text_repel( data= my_data, aes(x=longitude, y=latitude, label=Sampling.Site), size=4) +
scale_bar(lon = -150, lat = 47.3,
distance_lon = 300, distance_lat = 15, distance_legend = 100,
dist_unit = "km", orientation = FALSE)
ak_colors <- c("firebrick4", "#f03b20", "#f03b20", "#feb24c", "#bd0026", "yellow")
ggplot() +
geom_polygon(data = USA, aes(x=long, y = lat, group = group), fill=" grey37", alpha=0.3) +
geom_polygon(data = Canada, aes(x=long, y = lat, group = group), fill=" grey17", alpha=0.3)+
geom_point(data=my_data, aes(x=longitude, y=latitude, color = Sampling.Site), size = 7, alpha = 0.7) +
theme(panel.background = element_rect(fill = "aliceblue"),
panel.grid.major = element_line(colour = NA),
axis.text=element_text(size=12),
axis.title =element_text(size=14),
legend.title=element_text(size=12),
legend.text=element_text(size=12))  +
coord_map(xlim= c(-119, -180),  ylim = c(46,65)) +
labs(x = "Longitude", y = "Latitude") +
scale_color_manual(values=ak_colors) +
#geom_text_repel( data= my_data, aes(x=longitude, y=latitude, label=Sampling.Site), size=4) +
scale_bar(lon = -150, lat = 47.3,
distance_lon = 300, distance_lat = 15, distance_legend = 100,
dist_unit = "km", orientation = FALSE)
ak_colors <- c("firebrick4", "#feb24c, "#f03b20", "#feb24c", "#bd0026", "yellow")
ggplot() +
geom_polygon(data = USA, aes(x=long, y = lat, group = group), fill=" grey37", alpha=0.3) +
geom_polygon(data = Canada, aes(x=long, y = lat, group = group), fill=" grey17", alpha=0.3)+
geom_point(data=my_data, aes(x=longitude, y=latitude, color = Sampling.Site), size = 7, alpha = 0.7) +
theme(panel.background = element_rect(fill = "aliceblue"),
panel.grid.major = element_line(colour = NA),
axis.text=element_text(size=12),
axis.title =element_text(size=14),
legend.title=element_text(size=12),
legend.text=element_text(size=12))  +
coord_map(xlim= c(-119, -180),  ylim = c(46,65)) +
labs(x = "Longitude", y = "Latitude") +
scale_color_manual(values=ak_colors) +
#geom_text_repel( data= my_data, aes(x=longitude, y=latitude, label=Sampling.Site), size=4) +
scale_bar(lon = -150, lat = 47.3,
distance_lon = 300, distance_lat = 15, distance_legend = 100,
dist_unit = "km", orientation = FALSE)
#dev.off()
# Make a map of Korean samples only
#tiff(file = "Map_BC.tiff", width = 36, height = 27, units = "cm", res = 600, compression="lzw")
#kor_colors <- c("forestgreen","forestgreen","deepskyblue4","deepskyblue4","deepskyblue4","deepskyblue4")
kor_colors <- c("olivedrab3","slateblue1","deepskyblue","lightblue4", "navy","forestgreen")
leg_colors <- c()
ggplot() +
geom_polygon(data = S_Korea, aes(x=long, y = lat, group = group), fill=" grey37", alpha=0.3) +
geom_polygon(data = N_Korea, aes(x=long, y = lat, group = group), fill=" grey17", alpha=0.3)+
geom_polygon(data = China, aes(x=long, y = lat, group = group), fill=" grey37", alpha=0.3) +
geom_polygon(data = Japan, aes(x=long, y = lat, group = group), fill=" grey37", alpha=0.3) +
geom_point(data=Korea_data, aes(x=longitude, y=latitude, color=Sampling.Site), size = 7, alpha = 0.7) +
theme(panel.background = element_rect(fill = "aliceblue"),
panel.grid.major = element_line(colour = NA),
axis.text=element_text(size=12),
axis.title =element_text(size=14),
legend.title=element_text(size=12),
legend.text=element_text(size=12)) +
coord_map(xlim= c(123, 132),  ylim = c(33,39)) +
labs(x = "Longitude", y = "Latitude") +
scale_color_manual(values=kor_colors) +
#geom_text_repel( data= Korea_data, aes(x=longitude, y=latitude, label=Sampling.Site), size=4) +
scale_bar(lon = 120.5, lat = 34,
distance_lon = 100, distance_lat = 15, distance_legend = 40,
dist_unit = "km", orientation = FALSE)
ak_colors <- c("firebrick4", "#feb24c", "#f03b20", "#feb24c", "#bd0026", "yellow")
ggplot() +
geom_polygon(data = USA, aes(x=long, y = lat, group = group), fill=" grey37", alpha=0.3) +
geom_polygon(data = Canada, aes(x=long, y = lat, group = group), fill=" grey17", alpha=0.3)+
geom_point(data=my_data, aes(x=longitude, y=latitude, color = Sampling.Site), size = 7, alpha = 0.7) +
theme(panel.background = element_rect(fill = "aliceblue"),
panel.grid.major = element_line(colour = NA),
axis.text=element_text(size=12),
axis.title =element_text(size=14),
legend.title=element_text(size=12),
legend.text=element_text(size=12))  +
coord_map(xlim= c(-119, -180),  ylim = c(46,65)) +
labs(x = "Longitude", y = "Latitude") +
scale_color_manual(values=ak_colors) +
#geom_text_repel( data= my_data, aes(x=longitude, y=latitude, label=Sampling.Site), size=4) +
scale_bar(lon = -150, lat = 47.3,
distance_lon = 300, distance_lat = 15, distance_legend = 100,
dist_unit = "km", orientation = FALSE)
ak_colors <- c("firebrick4", "#feb24c", "#f03b20", "#fd8d3c", "#bd0026", "yellow")
ggplot() +
geom_polygon(data = USA, aes(x=long, y = lat, group = group), fill=" grey37", alpha=0.3) +
geom_polygon(data = Canada, aes(x=long, y = lat, group = group), fill=" grey17", alpha=0.3)+
geom_point(data=my_data, aes(x=longitude, y=latitude, color = Sampling.Site), size = 7, alpha = 0.7) +
theme(panel.background = element_rect(fill = "aliceblue"),
panel.grid.major = element_line(colour = NA),
axis.text=element_text(size=12),
axis.title =element_text(size=14),
legend.title=element_text(size=12),
legend.text=element_text(size=12))  +
coord_map(xlim= c(-119, -180),  ylim = c(46,65)) +
labs(x = "Longitude", y = "Latitude") +
scale_color_manual(values=ak_colors) +
#geom_text_repel( data= my_data, aes(x=longitude, y=latitude, label=Sampling.Site), size=4) +
scale_bar(lon = -150, lat = 47.3,
distance_lon = 300, distance_lat = 15, distance_legend = 100,
dist_unit = "km", orientation = FALSE)
library(readr)
library(ggplot2)
library(dplyr)
setwd("D:/Pacific cod/DataAnalysis/PCod-Compare-repo/analyses/SlidingWindow")
source("SlidingWindow_FindMarkers_Function.R")
source("Plot_SlidingWindowAnalysis_Functions.R")
mydata <- read_delim("EastvWest/batch_8_SWA_mydatawest_globalFST_filtered_output_kernel_smoothing_1e+05_bootstraps_sigma_250000_div150_FILTERED.txt", "\t", escape_double = FALSE, trim_ws = TRUE)
head(mydata)
mydata <- read_delim("EastvWest/batch_8_SWA_globalFST_filtered_output_kernel_smoothing_1e+05_bootstraps_sigma_250000_div150_FILTERED.txt", "\t", escape_double = FALSE, trim_ws = TRUE)
mydata <- read_delim("EastvWest/batch_8_SWA_eastwest_globalFST_filtered_output_kernel_smoothing_1e+05_bootstraps_sigma_250000_div150_FILTERED.txt", "\t", escape_double = FALSE, trim_ws = TRUE)
head(mydata)
mydata_selection <- mydata %>%
mutate(positive = ifelse(`Fst.Fct` > upper_95, "1", "0")) %>%
mutate(negative = ifelse(`Fst.Fct` < lower_95, "1", "0")) %>%
mutate(selection = ifelse(positive == 1, "Yes", "No"))
head(mydata_selection)
ggplot(data=mydata_selection, aes(x = `Fst.Fct`, y = upper_95)) +
geom_point(aes(color=positive)) +
labs(title="mydata Sliding Window\nPositive Selection")
colnames(mydata_selection) <- c("chromosome","position","Fst/Fct","Mean_boostrap","lower_95","upper_95","pvalue","positive","negative","selection")
just_plot_diverge(data1 = mydata_selection, Nb_divisions = 150, which.chromosome.analysis="all", which.chromosome.plot="all",export = TRUE, name="plots/Eastwest/SWA_EastWest_Divergence")
just_plot_diverge(data1 = mydata_selection, Nb_divisions = 150, which.chromosome.analysis="all", which.chromosome.plot="all",export = TRUE, name="plots/Eastwest/SWA_EastWest_Divergence_black")
just_plot_diverge(data1 = mydata_selection, Nb_divisions = 150, which.chromosome.analysis="all", which.chromosome.plot="all",export = TRUE, name="plots/Eastwest/SWA_EastWest_Divergence_filtered")
source("Plot_SlidingWindowAnalysis_Functions.R")
just_plot_diverge(data1 = mydata_selection, Nb_divisions = 150, which.chromosome.analysis="all", which.chromosome.plot="all",export = TRUE, name="plots/Eastwest/SWA_EastWest_Divergence_filtered")
source("Plot_SlidingWindowAnalysis_Functions.R")
just_plot_diverge(data1 = mydata_selection, Nb_divisions = 150, which.chromosome.analysis="all", which.chromosome.plot="all",export = TRUE, name="plots/Eastwest/SWA_EastWest_Divergence_filtered")
source("Plot_SlidingWindowAnalysis_Functions.R")
just_plot_diverge(data1 = mydata_selection, Nb_divisions = 150, which.chromosome.analysis="all", which.chromosome.plot="all",export = TRUE, name="plots/Eastwest/SWA_EastWest_Divergence_filtered")
