swa_output = read.table("East/batch_8_final_filtered_east_globalFST_kernel_smoothing_1e+05_bootstraps_sigma_250000_div150_FILTERED.txt", header = TRUE, sep = "\t")
dim(swa_output)
head(swa_output) ## heading should be:  chromosome,position,Fst.Fct,Mean_boostrap,lower_95,upper_95,pvalue
swa_input <- read.table("East/batch_8_SWA_input_east_sorted.txt", header = TRUE, sep="\t", colClasses = c("character", "numeric", "character", "numeric"))
head(swa_input) ## heading should be:  Locus,fst,chromosome,position
outlierfile = read.table("../outliers/batch_8_final_filtered_aligned_WEST_outliers_2progs_forSWA.txt", header = TRUE, colClasses = c("character"))
head(outlierfile)
outlier_loci <- outlierfile$Locus
str(outlier_loci) # should be characters
outlierfile = read.table("../outliers/batch_8_final_filtered_aligned_EAST_outliers_2progs_forSWA.txt", header = TRUE, colClasses = c("character"))
head(outlierfile)
# Plotting Function -------------------------------------------------------
## Key for editing plotting function
##    1. Change output picture size: 98
##    2. Change plotting parameters for average line of sliding window analysis: 102
##    3. Change plotting parameters for CI polygons: 106-107
##    4. Change plotting parameters for CI upper / lower limit lines: 104-105
##    5. Change plotting parameters for loci: 114
##    6. Change plotting parameters for outlier loci: 119
plot_loci_overlay = function(data = swa_output, loci_data = swa_input, outlier_data = outliers, Nb_bootstrap=100000, Nb_divisions = 150, color="red", ylim = NULL, which.chromosome.analysis="all", which.chromosome.plot="all",export = TRUE, name="SWA_output_outliers_plot")
{
# subset the data if not looking at all chromosomes; otherwise, load in all data
if(which.chromosome.analysis!="all") data = subset(data, subset=chromosome %in% which.chromosome.analysis)
if(which.chromosome.analysis=="all") data = data
# set number of chromosomes to the unique values of column chromosome in data (be sure to match column header!!)
Nb_chromosome = unique(data$chromosome)
# set count; used for subsetted the vector "marker density"
count = 0
# for each chromosome:
for (ijk in Nb_chromosome)
{
# subset full data frame to only include that chromosome and save as separate data frame
Data.part = subset(data, subset=chromosome %in% ijk)
print(head(Data.part))
print("Length of moving average data:")
print(length(Data.part[,2]))
# subset loci data frame to only include that chromosome and save as separate data frame
loci.part = subset(loci_data, chromosome %in% ijk)
print("Number of Loci on this chromosome:")
print(length(loci.part$chromosome))
# subset loci data frame to only include outliers
outliers.part = subset(loci.part, Locus %in% outlier_data)
print("Number of Outliers on this chromosome:")
print(length(outliers.part$chromosome))
# set min limit for plot by selecting the min of all data in columns 3:6 of data frame
min_lim=min(Data.part[,3:6],na.rm=TRUE)-0.02
# set max limit for plot by selecting the max of all data in columns 3:6 of data frame
if(ylim == "NULL"){
max_lim=max(max(Data.part[,3:6],na.rm=TRUE),max(loci.part$fst, na.rm=TRUE))+0.1
} else {max_lim = ylim}
# set max x axis for plot by finding the last marker position
max_x_lim = max(Data.part[,2])
# save locations of NAs in 3rd column of data frame ("Fst.Fct")
where.NA = which(is.na(Data.part[,3]))
# subset marker data based on chromosome you are looking at
#marker_density_subset = subset(marker_density, chrom %in% ijk)
#markers_per_window = marker_density_subset$num_markers
#print(head(marker_density_subset))
#print("length of marker density vector:")
#print(length(markers_per_window))
## plot position of marker on chromosome v. "Fst.Fct" calculated in sla ##
# if you want to export, create file name
if( export == TRUE ){
plotname = paste(name, ijk, sep="_")
png(paste(plotname, "png", sep="."), width=960, height=480)
}
## use min/max_lim above to define the y axis
par(mar=c(5,4,4,2) + 0.1)
plot(Data.part[,2], Data.part[,3],type="l",ylim=c(min_lim,max_lim), xlim=c(0,max_x_lim), lwd=3, col=color, ylab='',xlab='',cex.lab=1, cex.axis=1)
# add title, lines to plot
if(length(where.NA)!=0) lines(Data.part[,2][-where.NA], Data.part[,5][-where.NA], col=rgb(0.193,0.205,0.205,0.25))
if(length(where.NA)!=0) lines(Data.part[,2][-where.NA], Data.part[,6][-where.NA], col=rgb(0.193,0.205,0.205,0.25))
if(length(where.NA)!=0) polygon(c(Data.part[,2][-where.NA], rev(Data.part[,2][-where.NA])), c(Data.part[,5][-where.NA], rev(Data.part[,6][-where.NA])), col=rgb(0.193,0.205,0.205,0.25))
if(length(where.NA)==0) polygon(c(Data.part[,2], rev(Data.part[,2])), c(Data.part[,5], rev(Data.part[,6])), col=rgb(0.193,0.205,0.205,0.25))
abline(h=0)
mtext(paste(ijk),outer=TRUE,line=-2,cex=2,at=0.515)
mtext("Map Position (bp)",outer=TRUE,side=1,line=-2,cex=2,at=0.525)
mtext(expression(paste("F"[ST])),outer=TRUE,side=2,line=-2,cex=2,at=0.525)
# plot loci over the existing sliding window analysis
par(new=TRUE)
plot(loci.part$position, loci.part$fst, col = "black", pch = 15, ylim = c(min_lim,max_lim),
xlim = c(0, max_x_lim), xaxt = "n", yaxt = "n", xlab = "", ylab = "")
# change color of outlier markers by plotting over loci markers
if(length(outliers.part$position) > 1){
par(new=TRUE)
plot(outliers.part$position, outliers.part$fst, col=color, pch = 15, ylim=c(min_lim,max_lim),
xlim=c(0,max_x_lim),xaxt = "n", yaxt = "n", xlab = "", ylab= "")
}
if( export == TRUE ){
dev.off()
}
count = count + 1
}
print(paste("Finished plotting ",count,"chromosomes"))
}
plot_loci_overlay(data = swa_output, loci_data = swa_input, outlier_data = outlier_loci, Nb_bootstrap=100000, Nb_divisions = 150, color="darkorchid2", which.chromosome.analysis="all", which.chromosome.plot="all",ylim = 0.5, export = TRUE, name="plots/East/East_SWA_AllLoci_plot")
plot_loci_overlay(data = swa_output, loci_data = swa_input, outlier_data = outlier_loci, Nb_bootstrap=100000, Nb_divisions = 150, color="darkorchid2", which.chromosome.analysis="all", which.chromosome.plot="all",ylim = 0.25, export = TRUE, name="plots/East/East_SWA_AllLoci_plot")
plot_loci_overlay = function(data = swa_output, loci_data = swa_input, outlier_data = outliers, Nb_bootstrap=100000, Nb_divisions = 150, color="red", ylim = NULL, which.chromosome.analysis="all", which.chromosome.plot="all",export = TRUE, name="SWA_output_outliers_plot")
{
# subset the data if not looking at all chromosomes; otherwise, load in all data
if(which.chromosome.analysis!="all") data = subset(data, subset=chromosome %in% which.chromosome.analysis)
if(which.chromosome.analysis=="all") data = data
# set number of chromosomes to the unique values of column chromosome in data (be sure to match column header!!)
Nb_chromosome = unique(data$chromosome)
# set count; used for subsetted the vector "marker density"
count = 0
# for each chromosome:
for (ijk in Nb_chromosome)
{
# subset full data frame to only include that chromosome and save as separate data frame
Data.part = subset(data, subset=chromosome %in% ijk)
print(head(Data.part))
print("Length of moving average data:")
print(length(Data.part[,2]))
# subset loci data frame to only include that chromosome and save as separate data frame
loci.part = subset(loci_data, chromosome %in% ijk)
print("Number of Loci on this chromosome:")
print(length(loci.part$chromosome))
# subset loci data frame to only include outliers
outliers.part = subset(loci.part, Locus %in% outlier_data)
print("Number of Outliers on this chromosome:")
print(length(outliers.part$chromosome))
# set min limit for plot by selecting the min of all data in columns 3:6 of data frame
min_lim=min(Data.part[,3:6],na.rm=TRUE)-0.02
# set max limit for plot by selecting the max of all data in columns 3:6 of data frame
if(ylim == "NULL"){
max_lim=max(max(Data.part[,3:6],na.rm=TRUE),max(loci.part$fst, na.rm=TRUE))+0.1
} else {max_lim = ylim}
# set max x axis for plot by finding the last marker position
max_x_lim = max(Data.part[,2])
# save locations of NAs in 3rd column of data frame ("Fst.Fct")
where.NA = which(is.na(Data.part[,3]))
# subset marker data based on chromosome you are looking at
#marker_density_subset = subset(marker_density, chrom %in% ijk)
#markers_per_window = marker_density_subset$num_markers
#print(head(marker_density_subset))
#print("length of marker density vector:")
#print(length(markers_per_window))
## plot position of marker on chromosome v. "Fst.Fct" calculated in sla ##
# if you want to export, create file name
if( export == TRUE ){
plotname = paste(name, ijk, sep="_")
png(paste(plotname, "png", sep="."), width=960, height=480)
}
## use min/max_lim above to define the y axis
par(mar=c(5,4,4,2) + 0.1)
plot(Data.part[,2], Data.part[,3],type="l",ylim=c(min_lim,max_lim), xlim=c(0,max_x_lim), lwd=3, col=color, ylab='',xlab='',cex.lab=1, cex.axis=1)
# add title, lines to plot
if(length(where.NA)!=0) lines(Data.part[,2][-where.NA], Data.part[,5][-where.NA], col=rgb(0.193,0.205,0.205,0.25))
if(length(where.NA)!=0) lines(Data.part[,2][-where.NA], Data.part[,6][-where.NA], col=rgb(0.193,0.205,0.205,0.25))
if(length(where.NA)!=0) polygon(c(Data.part[,2][-where.NA], rev(Data.part[,2][-where.NA])), c(Data.part[,5][-where.NA], rev(Data.part[,6][-where.NA])), col=rgb(0.193,0.205,0.205,0.25))
if(length(where.NA)==0) polygon(c(Data.part[,2], rev(Data.part[,2])), c(Data.part[,5], rev(Data.part[,6])), col=rgb(0.193,0.205,0.205,0.25))
abline(h=0)
mtext(paste(ijk),outer=TRUE,line=-2,cex=2,at=0.515)
mtext("Map Position (bp)",outer=TRUE,side=1,line=-2,cex=2,at=0.525)
mtext(expression(paste("F"[ST])),outer=TRUE,side=2,line=-2,cex=2,at=0.525)
# plot loci over the existing sliding window analysis
par(new=TRUE)
plot(loci.part$position, loci.part$fst, col = "black", pch = 15, ylim = c(min_lim,max_lim),
xlim = c(0, max_x_lim), xaxt = "n", yaxt = "n", xlab = "", ylab = "")
# change color of outlier markers by plotting over loci markers
if(length(outliers.part$position) > 0){
par(new=TRUE)
plot(outliers.part$position, outliers.part$fst, col=color, pch = 15, ylim=c(min_lim,max_lim),
xlim=c(0,max_x_lim),xaxt = "n", yaxt = "n", xlab = "", ylab= "")
}
if( export == TRUE ){
dev.off()
}
count = count + 1
}
print(paste("Finished plotting ",count,"chromosomes"))
}
plot_loci_overlay(data = swa_output, loci_data = swa_input, outlier_data = outlier_loci, Nb_bootstrap=100000, Nb_divisions = 150, color="darkorchid2", which.chromosome.analysis="all", which.chromosome.plot="all",ylim = 0.25, export = TRUE, name="plots/East/East_SWA_AllLoci_plot")
plot_loci_overlay = function(data = swa_output, loci_data = swa_input, outlier_data = outliers, Nb_bootstrap=100000, Nb_divisions = 150, color="red", ylim = NULL, which.chromosome.analysis="all", which.chromosome.plot="all",export = TRUE, name="SWA_output_outliers_plot")
{
# subset the data if not looking at all chromosomes; otherwise, load in all data
if(which.chromosome.analysis!="all") data = subset(data, subset=chromosome %in% which.chromosome.analysis)
if(which.chromosome.analysis=="all") data = data
# set number of chromosomes to the unique values of column chromosome in data (be sure to match column header!!)
Nb_chromosome = unique(data$chromosome)
# set count; used for subsetted the vector "marker density"
count = 0
# for each chromosome:
for (ijk in Nb_chromosome)
{
# subset full data frame to only include that chromosome and save as separate data frame
Data.part = subset(data, subset=chromosome %in% ijk)
print(head(Data.part))
print("Length of moving average data:")
print(length(Data.part[,2]))
# subset loci data frame to only include that chromosome and save as separate data frame
loci.part = subset(loci_data, chromosome %in% ijk)
print("Number of Loci on this chromosome:")
print(length(loci.part$chromosome))
# subset loci data frame to only include outliers
outliers.part = subset(loci.part, Locus %in% outlier_data)
print("Number of Outliers on this chromosome:")
print(length(outliers.part$chromosome))
# set min limit for plot by selecting the min of all data in columns 3:6 of data frame
min_lim=min(Data.part[,3:6],na.rm=TRUE)-0.02
# set max limit for plot by selecting the max of all data in columns 3:6 of data frame
if(ylim == "NULL"){
max_lim=max(max(Data.part[,3:6],na.rm=TRUE),max(loci.part$fst, na.rm=TRUE))+0.1
} else {max_lim = ylim}
# set max x axis for plot by finding the last marker position
max_x_lim = max(Data.part[,2])
# save locations of NAs in 3rd column of data frame ("Fst.Fct")
where.NA = which(is.na(Data.part[,3]))
# subset marker data based on chromosome you are looking at
#marker_density_subset = subset(marker_density, chrom %in% ijk)
#markers_per_window = marker_density_subset$num_markers
#print(head(marker_density_subset))
#print("length of marker density vector:")
#print(length(markers_per_window))
## plot position of marker on chromosome v. "Fst.Fct" calculated in sla ##
# if you want to export, create file name
if( export == TRUE ){
plotname = paste(name, ijk, sep="_")
png(paste(plotname, "png", sep="."), width=960, height=480)
}
## use min/max_lim above to define the y axis
par(mar=c(5,4,4,2) + 0.1)
plot(Data.part[,2], Data.part[,3],type="l",ylim=c(min_lim,max_lim), xlim=c(0,max_x_lim), lwd=3, col=color, ylab='',xlab='',cex.lab=1, cex.axis=1)
# add title, lines to plot
if(length(where.NA)!=0) lines(Data.part[,2][-where.NA], Data.part[,5][-where.NA], col=rgb(0.193,0.205,0.205,0.25))
if(length(where.NA)!=0) lines(Data.part[,2][-where.NA], Data.part[,6][-where.NA], col=rgb(0.193,0.205,0.205,0.25))
if(length(where.NA)!=0) polygon(c(Data.part[,2][-where.NA], rev(Data.part[,2][-where.NA])), c(Data.part[,5][-where.NA], rev(Data.part[,6][-where.NA])), col=rgb(0.193,0.205,0.205,0.25))
if(length(where.NA)==0) polygon(c(Data.part[,2], rev(Data.part[,2])), c(Data.part[,5], rev(Data.part[,6])), col=rgb(0.193,0.205,0.205,0.25))
abline(h=0)
mtext(paste(ijk),outer=TRUE,line=-2,cex=2,at=0.515)
mtext("Map Position (bp)",outer=TRUE,side=1,line=-2,cex=2,at=0.525)
mtext(expression(paste("F"[ST])),outer=TRUE,side=2,line=-2,cex=2,at=0.525)
# plot loci over the existing sliding window analysis
par(new=TRUE)
plot(loci.part$position, loci.part$fst, col = "black", pch = 15, ylim = c(min_lim,max_lim),
xlim = c(0, max_x_lim), xaxt = "n", yaxt = "n", xlab = "", ylab = "")
# change color of outlier markers by plotting over loci markers
if(length(outliers.part$position) > 0){
par(new=TRUE)
print(outliers.part)
plot(outliers.part$position, outliers.part$fst, col="darkorchid2", pch = 15, ylim=c(min_lim,max_lim),
xlim=c(0,max_x_lim),xaxt = "n", yaxt = "n", xlab = "", ylab= "")
}
if( export == TRUE ){
dev.off()
}
count = count + 1
}
print(paste("Finished plotting ",count,"chromosomes"))
}
plot_loci_overlay(data = swa_output, loci_data = swa_input, outlier_data = outlier_loci, Nb_bootstrap=100000, Nb_divisions = 150, color="darkorchid2", which.chromosome.analysis="all", which.chromosome.plot="all",ylim = 0.25, export = FALSE, name="plots/East/East_SWA_AllLoci_plot")
head(outlierfile)
outlier_loci
outlier_loci <- outlierfile$Locus
str(outlier_loci) # should be characters
plot_loci_overlay(data = swa_output, loci_data = swa_input, outlier_data = outlier_loci, Nb_bootstrap=100000, Nb_divisions = 150, color="darkorchid2", which.chromosome.analysis="all", which.chromosome.plot="all",ylim = 0.25, export = FALSE, name="plots/East/East_SWA_AllLoci_plot")
plot_loci_overlay(data = swa_output, loci_data = swa_input, outlier_data = outlier_loci, Nb_bootstrap=100000, Nb_divisions = 150, color="darkorchid2", which.chromosome.analysis="all", which.chromosome.plot="all",ylim = 0.25, export = TRUE, name="plots/East/East_SWA_AllLoci_plot")
outlierfile = read.table("../outliers/batch_8_final_filtered_aligned_EAST_outliers.txt", header = TRUE, colClasses = c("character", "character"))
head(outlierfile)
outlier_loci <- outlierfile$Locus
str(outlier_loci) # should be characters
plot_loci_overlay(data = swa_output, loci_data = swa_input, outlier_data = outlier_loci, Nb_bootstrap=100000, Nb_divisions = 150, color="darkorchid2", which.chromosome.analysis="all", which.chromosome.plot="all",ylim = 0.25, export = FALSE, name="plots/East/East_SWA_AllLoci_plot")
outlierfile = read.table("../outliers/batch_8_final_filtered_aligned_WEST_outliers_2progs_forSWA.txt", header = TRUE, colClasses = c("character", "character"))
outlierfile = read.table("../outliers/batch_8_final_filtered_aligned_WEST_outliers_2progs_forSWA.txt", header = TRUE, colClasses = c("character"))
head(outlierfile)
outlier_loci <- outlierfile$Locus
str(outlier_loci) # should be characters
swa_output = read.table("West/batch_8_final_filtered_west_2reg_kernel_smoothing_1e+05_bootstraps_sigma_250000_div150_FILTERED.txt", header = TRUE, sep = "\t")
dim(swa_output)
head(swa_output) ## heading should be:  chromosome,position,Fst.Fct,Mean_boostrap,lower_95,upper_95,pvalue
swa_input <- read.table("West/batch_8_SWA_input_west_2reg_sorted.txt", header = TRUE, sep="\t", colClasses = c("character", "numeric", "character", "numeric"))
swa_input <- read.table("West/batch_8_SWA_input_west_sorted.txt", header = TRUE, sep="\t", colClasses = c("character", "numeric", "character", "numeric"))
head(swa_input) ## heading should be:  Locus,fst,chromosome,position
plot_loci_overlay(data = swa_output, loci_data = swa_input, outlier_data = outlier_loci, Nb_bootstrap=100000, Nb_divisions = 150, color="deepskyblue4", which.chromosome.analysis="all", which.chromosome.plot="all",ylim = 0.5, export = TRUE, name="plots/West/West_SWA_AllLoci_plot")
plot_loci_overlay = function(data = swa_output, loci_data = swa_input, outlier_data = outliers, Nb_bootstrap=100000, Nb_divisions = 150, color="red", ylim = NULL, which.chromosome.analysis="all", which.chromosome.plot="all",export = TRUE, name="SWA_output_outliers_plot")
{
# subset the data if not looking at all chromosomes; otherwise, load in all data
if(which.chromosome.analysis!="all") data = subset(data, subset=chromosome %in% which.chromosome.analysis)
if(which.chromosome.analysis=="all") data = data
# set number of chromosomes to the unique values of column chromosome in data (be sure to match column header!!)
Nb_chromosome = unique(data$chromosome)
# set count; used for subsetted the vector "marker density"
count = 0
# for each chromosome:
for (ijk in Nb_chromosome)
{
# subset full data frame to only include that chromosome and save as separate data frame
Data.part = subset(data, subset=chromosome %in% ijk)
print(head(Data.part))
print("Length of moving average data:")
print(length(Data.part[,2]))
# subset loci data frame to only include that chromosome and save as separate data frame
loci.part = subset(loci_data, chromosome %in% ijk)
print("Number of Loci on this chromosome:")
print(length(loci.part$chromosome))
# subset loci data frame to only include outliers
outliers.part = subset(loci.part, Locus %in% outlier_data)
print("Number of Outliers on this chromosome:")
print(length(outliers.part$chromosome))
# set min limit for plot by selecting the min of all data in columns 3:6 of data frame
min_lim=min(Data.part[,3:6],na.rm=TRUE)-0.02
# set max limit for plot by selecting the max of all data in columns 3:6 of data frame
if(ylim == "NULL"){
max_lim=max(max(Data.part[,3:6],na.rm=TRUE),max(loci.part$fst, na.rm=TRUE))+0.1
} else {max_lim = ylim}
# set max x axis for plot by finding the last marker position
max_x_lim = max(Data.part[,2])
# save locations of NAs in 3rd column of data frame ("Fst.Fct")
where.NA = which(is.na(Data.part[,3]))
# subset marker data based on chromosome you are looking at
#marker_density_subset = subset(marker_density, chrom %in% ijk)
#markers_per_window = marker_density_subset$num_markers
#print(head(marker_density_subset))
#print("length of marker density vector:")
#print(length(markers_per_window))
## plot position of marker on chromosome v. "Fst.Fct" calculated in sla ##
# if you want to export, create file name
if( export == TRUE ){
plotname = paste(name, ijk, sep="_")
png(paste(plotname, "png", sep="."), width=960, height=480)
}
## use min/max_lim above to define the y axis
par(mar=c(5,4,4,2) + 0.1)
plot(Data.part[,2], Data.part[,3],type="l",ylim=c(min_lim,max_lim), xlim=c(0,max_x_lim), lwd=3, col=color, ylab='',xlab='',cex.lab=1, cex.axis=1)
# add title, lines to plot
if(length(where.NA)!=0) lines(Data.part[,2][-where.NA], Data.part[,5][-where.NA], col=rgb(0.193,0.205,0.205,0.25))
if(length(where.NA)!=0) lines(Data.part[,2][-where.NA], Data.part[,6][-where.NA], col=rgb(0.193,0.205,0.205,0.25))
if(length(where.NA)!=0) polygon(c(Data.part[,2][-where.NA], rev(Data.part[,2][-where.NA])), c(Data.part[,5][-where.NA], rev(Data.part[,6][-where.NA])), col=rgb(0.193,0.205,0.205,0.25))
if(length(where.NA)==0) polygon(c(Data.part[,2], rev(Data.part[,2])), c(Data.part[,5], rev(Data.part[,6])), col=rgb(0.193,0.205,0.205,0.25))
abline(h=0)
mtext(paste(ijk),outer=TRUE,line=-2,cex=2,at=0.515)
mtext("Map Position (bp)",outer=TRUE,side=1,line=-2,cex=2,at=0.525)
mtext(expression(paste("F"[ST])),outer=TRUE,side=2,line=-2,cex=2,at=0.525)
# plot loci over the existing sliding window analysis
par(new=TRUE)
plot(loci.part$position, loci.part$fst, col = "black", pch = 15, ylim = c(min_lim,max_lim),
xlim = c(0, max_x_lim), xaxt = "n", yaxt = "n", xlab = "", ylab = "")
# change color of outlier markers by plotting over loci markers
if(length(outliers.part$position) > 0){
par(new=TRUE)
print(outliers.part)
plot(outliers.part$position, outliers.part$fst, col=color, pch = 15, ylim=c(min_lim,max_lim),
xlim=c(0,max_x_lim),xaxt = "n", yaxt = "n", xlab = "", ylab= "")
}
if( export == TRUE ){
dev.off()
}
count = count + 1
}
print(paste("Finished plotting ",count,"chromosomes"))
}
plot_loci_overlay(data = swa_output, loci_data = swa_input, outlier_data = outlier_loci, Nb_bootstrap=100000, Nb_divisions = 150, color="deepskyblue4", which.chromosome.analysis="all", which.chromosome.plot="all",ylim = 0.5, export = TRUE, name="plots/West/West_SWA_AllLoci_plot")
library(ggplot2)
library(dplyr)
source("Plot_SlidingWindowAnalysis_Functions.R")
## set working directory
setwd("D:/Pacific cod/DataAnalysis/PCod-Compare-repo/analyses/SlidingWindow")
east <- read.table("East/batch_8_final_filtered_east_globalFST_kernel_smoothing_1e+05_bootstraps_sigma_250000_div150_FILTERED.txt", header=TRUE, sep="\t")
head(east)
west <- read.table("West/batch_8_final_filtered_west_2reg_kernel_smoothing_1e+05_bootstraps_sigma_250000_div150_FILTERED.txt", header=TRUE, sep="\t")
head(west)
all <- read.table("EastvWest/batch_8_SWA_eastwest_globalFst_filtered_output_kernel_smoothing_1e+05_bootstraps_sigma_250000_div150_FILTERED.txt", header=TRUE, sep="\t")
plot_lines_overlay(data1 = all, data2 = east, data3 = west, Nb_divisions = 150, legend.text=c("All Data", "East Population", "West Population"), which.chromosome.analysis="all", which.chromosome.plot="all",export = FALSE, name="SWA_lines_overlay_test")
east_selection <- east %>%
mutate(positive = ifelse(`Fst.Fct` > upper_95, "1", "0")) %>%
mutate(negative = ifelse(`Fst.Fct` < lower_95, "1", "0")) %>%
mutate(selection = ifelse(positive == 1, "Yes", "No"))
head(east_selection)
west_selection <- west %>%
mutate(positive = ifelse(`Fst.Fct` > upper_95, "1", "0")) %>%
mutate(negative = ifelse(`Fst.Fct` < lower_95, "1", "0")) %>%
mutate(selection = ifelse(positive == 1, "Yes", "No"))
head(west_selection)
all_selection <- all %>%
mutate(positive = ifelse(`Fst.Fct` > upper_95, "1", "0")) %>%
mutate(negative = ifelse(`Fst.Fct` < lower_95, "1", "0")) %>%
mutate(selection = ifelse(positive == 1, "Yes", "No"))
head(all_selection)
plot_lines_overlay_divergence(data1 = all_selection, data2 = east_selection, data3 = west_selection, Nb_divisions = 150, legend.text=c("All Data", "East Population", "West Population"), which.chromosome.analysis="all", which.chromosome.plot="all",export = FALSE, name="plots/SWA_lines_overlay_divergence_test")
