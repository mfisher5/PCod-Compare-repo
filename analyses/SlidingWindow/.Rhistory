library(TTR)
library(zoo) # don't need to install; will install with TTR
library(dplyr)
setwd("D:/Pacific cod/DataAnalysis/PCod-Compare-repo/analyses/SlidingWindow")
align_data <- read.delim("West/batch_8_SWA_input_west_sorted_cpos.txt",sep="\t",header=TRUE)
dim(align_data)
colnames(align_data)
colnames(align_data) <- c("Locus", "fst", "chromosome", "position")
head(align_data)
plotting_reg_interval = function(Dat=mydata, Sigma_sliding_window=3, Nb_bootstrap=1000000, which.chromosome.analysis="all", which.chromosome.plot="All",division=100,name_output="SLA_output", path_output=".") {
if(which.chromosome.analysis!="all") Data.analysis = subset(Dat, subset=chromosome %in% which.chromosome.analysis)
if(which.chromosome.analysis=="all") Data.analysis = Dat
N_data = nrow(Data.analysis)
Nb_chromosome = unique(Data.analysis$chromosome)
## initialize parameters
Expected_MA = c()
Bootstrap_mean = c()
Bootstrap_sd = c()
CI_all_chromosomes=c()
Position_MA = c()
to_export=c()
to_export=as.data.frame(to_export)
## for each chromosome:
for (ijk in Nb_chromosome)
{
Data.part = subset(Dat, Dat$chromosome %in% ijk)
Size_window = 3*Sigma_sliding_window  # sliding window is 3 times the value of sigma in each direction
Beg_position_cM=min(Data.part$position)+Size_window ## calculations cannot start at 0, because it would be biased no values between -6 and 0cM for example
End_position_cM=max(Data.part$position)-Size_window
Beg_position = which(Data.part$position >=Beg_position_cM)[1] ### start at the first position as calculated before or at the first position where there is a data point (as sometimes, a large portion of the chromosome is made of duplicated loci --> not kept for population studies)
End_position = which(Data.part$position >= (max(End_position_cM)))[1]
Positions_LG=seq(from=Beg_position_cM,to=End_position_cM,length.out=division)  ## these position will be equidistant
MA_calc = function(x, do.boot=FALSE) ## MA=Moving Average
{
if(do.boot==TRUE) Fst_data = Dat$fst[sample(1:nrow(Dat), size= nrow(Data.part), replace=TRUE)]
if(do.boot==FALSE) Fst_data = Data.part$fst
MA_windows = which(Data.part$position >= (Positions_LG[x]-Size_window) & Data.part$position <= (Positions_LG[x]+Size_window))
MA_weight = exp(-(Data.part$position[MA_windows]-Positions_LG[x])^2/(2*Sigma_sliding_window^2))
MA_val = sum(Fst_data[MA_windows]*MA_weight)/sum(MA_weight)
}
# calculate the MAs_exp for all positions
MAs_exp = sapply(1:division, function(x) MA_calc(x, do.boot=FALSE))[1:division]
# calculate the MAs_bootstrap for all positions
MAs_bootstrap = sapply(1:Nb_bootstrap, function(x) sapply(1:division, function(y) MA_calc(y, do.boot=TRUE))[1:division])
#Calculate Confidence Interval
CI_all=t(apply(MAs_bootstrap,1,function(x) quantile(x,c(0.5,0.025,0.975),na.rm=TRUE)))
# Mean_boot = apply(MAs_bootstrap, 1, mean)
Sd_boot = apply(MAs_bootstrap, 1, sd)
Expected_MA = c(Expected_MA, MAs_exp)
CI_all_chromosomes=rbind(CI_all_chromosomes,CI_all)
Bootstrap_sd=c(Bootstrap_sd,Sd_boot)
min_lower95=min(CI_all,na.rm=TRUE)
max_upper95=max(CI_all,na.rm=TRUE)
min_MA=min(MAs_exp,na.rm=TRUE)
max_MA=max(MAs_exp,na.rm=TRUE)
min_lim=min(c(min_lower95,max_upper95,min_MA,max_MA),na.rm=TRUE)-0.02
max_lim=max(c(min_lower95,max_upper95,min_MA,max_MA),na.rm=TRUE)+0.02
where.NA = which(is.na(CI_all[,2]))
plot(Positions_LG, MAs_exp, type="l", ylim=c(min_lim,max_lim), lwd=3, col="red", main = paste(ijk))
lines(Positions_LG, CI_all[,1], col=1, lwd=2)
lines(Positions_LG, CI_all[,2], col=rgb(0.3,0.1,0.4, 0.5))
lines(Positions_LG, CI_all[,3], col=rgb(0.3,0.1,0.4, 0.5))
if(length(where.NA)!=0) polygon(c(Positions_LG[-where.NA], rev(Positions_LG[-where.NA])), c(CI_all[,2][-where.NA], rev(CI_all[,3][-where.NA])), col=rgb(0.3,0.1,0.4, 0.5))
if(length(where.NA)==0) polygon(c(Positions_LG, rev(Positions_LG)), c(CI_all[,2], rev(CI_all[,3])), col=rgb(0.3,0.1,0.4, 0.5))
positions_to_add=Positions_LG
chromosome=matrix(ijk,length(positions_to_add),1)
to_export_temp=cbind(chromosome,positions_to_add,MAs_exp,CI_all)
to_export_temp=as.data.frame(to_export_temp)
to_export=rbind(to_export,to_export_temp)
}
(P_value = pnorm(Expected_MA, CI_all_chromosomes[,1], Bootstrap_sd))
print (P_value)
to_export=cbind(to_export,P_value)
output<-paste(path_output,'/',name_output,'_kernel_smoothing_',Nb_bootstrap,'_bootstraps_sigma_',Sigma_sliding_window,'_div',division,'.txt', sep='')
colnames(to_export)=c("chromosome","position","Fst/Fct","Mean_boostrap","lower_95","upper_95","pvalue")
print(head(to_export))
write.table(to_export,file=output,quote=FALSE,sep="\t",col.names=TRUE,row.names=FALSE)
}
plotting_reg_interval(Dat = align_data, Sigma_sliding_window=250000, Nb_bootstrap=100000, which.chromosome.analysis="PCodG",which.chromosome.plot="PCodG",division=3450,name_output="West/batch_8_west_cpos_output",path_output=".")
library(ggplot2)
library(dplyr)
setwd("D:/Pacific cod/DataAnalysis/PCod-Compare-repo/analyses/SlidingWindow")
## sliding window analysis output
swa_output = read.table("EastvWest/batch_8_SWA_eastwest_output_kernel_smoothing_1e+05_bootstraps_sigma_250000_div150_FILTERED.txt", header = TRUE, sep = "\t")
dim(swa_output)
swa_output_west = read.table("West/batch_8_final_filtered_west_2reg_kernel_smoothing_1e+05_bootstraps_sigma_250000_div150_FILTERED.txt", header = TRUE, sep = "\t")
dim(swa_output_west)
## sliding window analysis input
swa_input = read.table("EastvWest/batch_8_final_filtered_aligned_SWA_input_eastwest.txt", header=TRUE, sep="\t", colClasses = c("numeric", "character", "numeric", "character", "numeric"))
head(swa_input)
colnames(swa_input) <- c("locus", "fst", "chromosome", "position")
swa_input_west = read.table("West/batch_8_SWA_input_west.txt", header=TRUE, sep="\t", colClasses = c("numeric", "character", "numeric", "character", "numeric"))
head(swa_input_west)
colnames(swa_input_west) <- c("locus", "fst", "chromosome", "position")
source("Plot_SlidingWindowAnalysis_Functions.R")
plot_outliers(data = swa_output, outlier_data = swa_input, Nb_bootstrap=100000, Nb_divisions = 150, which.chromosome.analysis="all", which.chromosome.plot="all",export = TRUE, name="plots/EastWest/SWA_EastWest_all_loci_plot")
library(TTR)
library(zoo) # don't need to install; will install with TTR
library(dplyr)
setwd("D:/Pacific cod/DataAnalysis/PCod-Compare-repo/analyses/SlidingWindow")
fstfile <- read.delim("batch_8_final_filtered_aligned_EAST_fst_perlocus.txt",sep="\t", header=TRUE)
infile <- read.delim("batch_8_final_filtered_alignments_summary.txt",header=TRUE)
head(infile)
head(fstfile)
align_data <- left_join(fstfile,infile,by="Locus")
dim(align_data)
head(align_data)
colnames(align_data) <- c("Locus", "fst","chromosome", "position")
write.table(align_data, "batch_8_SWA_input_east.txt", quote=FALSE, sep="\t")
align_data_sorted = align_data[order(align_data$chromosome, align_data$position),]
head(align_data_sorted)
write.table(align_data_sorted, "batch_8_SWA_input_east_sorted.txt", quote=FALSE, sep="\t", row.names=FALSE)
plotting_reg_interval = function(Dat=mydata, Sigma_sliding_window=3, Nb_bootstrap=1000000, which.chromosome.analysis="all", which.chromosome.plot="All",division=100,name_output="SLA_output", path_output=".") {
if(which.chromosome.analysis!="all") Data.analysis = subset(Dat, subset=chromosome %in% which.chromosome.analysis)
if(which.chromosome.analysis=="all") Data.analysis = Dat
N_data = nrow(Data.analysis)
Nb_chromosome = unique(Data.analysis$chromosome)
## initialize parameters
Expected_MA = c()
Bootstrap_mean = c()
Bootstrap_sd = c()
CI_all_chromosomes=c()
Position_MA = c()
to_export=c()
to_export=as.data.frame(to_export)
## for each chromosome:
for (ijk in Nb_chromosome)
{
Data.part = subset(Dat, Dat$chromosome %in% ijk)
Size_window = 3*Sigma_sliding_window  # sliding window is 3 times the value of sigma in each direction
Beg_position_cM=min(Data.part$position)+Size_window ## calculations cannot start at 0, because it would be biased no values between -6 and 0cM for example
End_position_cM=max(Data.part$position)-Size_window
Beg_position = which(Data.part$position >=Beg_position_cM)[1] ### start at the first position as calculated before or at the first position where there is a data point (as sometimes, a large portion of the chromosome is made of duplicated loci --> not kept for population studies)
End_position = which(Data.part$position >= (max(End_position_cM)))[1]
Positions_LG=seq(from=Beg_position_cM,to=End_position_cM,length.out=division)  ## these position will be equidistant
MA_calc = function(x, do.boot=FALSE) ## MA=Moving Average
{
if(do.boot==TRUE) Fst_data = Dat$fst[sample(1:nrow(Dat), size= nrow(Data.part), replace=TRUE)]
if(do.boot==FALSE) Fst_data = Data.part$fst
MA_windows = which(Data.part$position >= (Positions_LG[x]-Size_window) & Data.part$position <= (Positions_LG[x]+Size_window))
MA_weight = exp(-(Data.part$position[MA_windows]-Positions_LG[x])^2/(2*Sigma_sliding_window^2))
MA_val = sum(Fst_data[MA_windows]*MA_weight)/sum(MA_weight)
}
# calculate the MAs_exp for all positions
MAs_exp = sapply(1:division, function(x) MA_calc(x, do.boot=FALSE))[1:division]
# calculate the MAs_bootstrap for all positions
MAs_bootstrap = sapply(1:Nb_bootstrap, function(x) sapply(1:division, function(y) MA_calc(y, do.boot=TRUE))[1:division])
#Calculate Confidence Interval
CI_all=t(apply(MAs_bootstrap,1,function(x) quantile(x,c(0.5,0.025,0.975),na.rm=TRUE)))
# Mean_boot = apply(MAs_bootstrap, 1, mean)
Sd_boot = apply(MAs_bootstrap, 1, sd)
Expected_MA = c(Expected_MA, MAs_exp)
CI_all_chromosomes=rbind(CI_all_chromosomes,CI_all)
Bootstrap_sd=c(Bootstrap_sd,Sd_boot)
min_lower95=min(CI_all,na.rm=TRUE)
max_upper95=max(CI_all,na.rm=TRUE)
min_MA=min(MAs_exp,na.rm=TRUE)
max_MA=max(MAs_exp,na.rm=TRUE)
min_lim=min(c(min_lower95,max_upper95,min_MA,max_MA),na.rm=TRUE)-0.02
max_lim=max(c(min_lower95,max_upper95,min_MA,max_MA),na.rm=TRUE)+0.02
where.NA = which(is.na(CI_all[,2]))
#plot(Positions_LG, MAs_exp, type="l", ylim=c(min_lim,max_lim), lwd=3, col="red", main = paste(ijk))
#lines(Positions_LG, CI_all[,1], col=1, lwd=2)
#lines(Positions_LG, CI_all[,2], col=rgb(0.3,0.1,0.4, 0.5))
#lines(Positions_LG, CI_all[,3], col=rgb(0.3,0.1,0.4, 0.5))
#if(length(where.NA)!=0) polygon(c(Positions_LG[-where.NA], rev(Positions_LG[-where.NA])), c(CI_all[,2][-where.NA], rev(CI_all[,3][-where.NA])), col=rgb(0.3,0.1,0.4, 0.5))
#if(length(where.NA)==0) polygon(c(Positions_LG, rev(Positions_LG)), c(CI_all[,2], rev(CI_all[,3])), col=rgb(0.3,0.1,0.4, 0.5))
positions_to_add=Positions_LG
chromosome=matrix(ijk,length(positions_to_add),1)
to_export_temp=cbind(chromosome,positions_to_add,MAs_exp,CI_all)
to_export_temp=as.data.frame(to_export_temp)
to_export=rbind(to_export,to_export_temp)
}
(P_value = pnorm(Expected_MA, CI_all_chromosomes[,1], Bootstrap_sd))
print (P_value)
to_export=cbind(to_export,P_value)
output<-paste(path_output,'/',name_output,'_kernel_smoothing_',Nb_bootstrap,'_bootstraps_sigma_',Sigma_sliding_window,'_div',division,'.txt', sep='')
colnames(to_export)=c("chromosome","position","Fst/Fct","Mean_boostrap","lower_95","upper_95","pvalue")
print(head(to_export))
write.table(to_export,file=output,quote=FALSE,sep="\t",col.names=TRUE,row.names=FALSE)
}
plotting_reg_interval(Dat = align_data_sorted, Sigma_sliding_window=250000, Nb_bootstrap=100000, which.chromosome.analysis="all",which.chromosome.plot="all",division=150,name_output="batch_8_final_filtered_east_globalFST",path_output=".")
library(ggplot2)
library(dplyr)
setwd("D:/Pacific cod/DataAnalysis/PCod-Compare-repo/analyses/SlidingWindow")
swa_input = read.table("batch_8_SWA_input_east_sorted.txt", header = TRUE, sep = "\t")
head(swa_input)
source("SlidingWindow_FindMarkers_Function.R")
find_markers_in_window(marker_data = swa_input, window_size= 250000, divisions = 150, output = "East_Num_Name_Loci_Per_Window.txt")
all_marker_data <- read.table("East_SWA_Num_Name_Loci_Per_Window.txt", header=FALSE, sep="\t")
head(all_marker_data)
marker_data <- select(all_marker_data, c("V1", "V2", "V3"))
colnames(marker_data) <- c("chrom", "position", "num_markers")
all_marker_data <- read.table("East_Num_Name_Loci_Per_Window.txt", header=FALSE, sep="\t")
head(all_marker_data)
marker_data <- select(all_marker_data, c("V1", "V2", "V3"))
colnames(marker_data) <- c("chrom", "position", "num_markers")
markers_per_window <- marker_data$num_markers
mean(markers_per_window) ## 10.97 / 8.11
qplot(markers_per_window, geom="histogram",
binwidth = 1,
main = "Markers per Sliding Window, West\nAcross All Linkage Groups",
xlab = "# Markers",
ylab = "# Windows") +
annotate("text", x = 25, y = 300, label="Mean:\n7.17")
qplot(markers_per_window, geom="histogram",
binwidth = 1,
main = "Markers per Sliding Window, West\nAcross All Linkage Groups",
xlab = "# Markers",
ylab = "# Windows") +
annotate("text", x = 20, y = 300, label="Mean:\n7.17")
qplot(markers_per_window, geom="histogram",
binwidth = 1,
main = "Markers per Sliding Window, West\nAcross All Linkage Groups",
xlab = "# Markers",
ylab = "# Windows") +
annotate("text", x = 15, y = 300, label="Mean:\n7.17")
qplot(markers_per_window, geom="histogram",
binwidth = 1,
main = "Markers per Sliding Window, East\nAcross All Linkage Groups",
xlab = "# Markers",
ylab = "# Windows") +
annotate("text", x = 15, y = 300, label="Mean:\n7.17")
swa_output = read.table("batch_8_final_filtered_east_globalFST_kernel_smoothing_1e+05_bootstraps_sigma_250000_div150_FILTERED.txt", header = TRUE, sep = "\t")
swa_output = read.table("batch_8_final_filtered_east_globalFST_kernel_smoothing_1e+05_bootstraps_sigma_250000_div150.txt", header = TRUE, sep = "\t")
dim(swa_output)
source("Plot_SlidingWindowAnalysis_Functions.R")
if(length(swa_output$position) != length(markers_per_window)){
print("ERROR: position and marker density vectors are not of equal lengths. you cannot run the just-plot function until you subset markers_per_window.")
} else{print("continue to plotting function.")}
swa_output = read.table("batch_8_final_filtered_east_globalFST_kernel_smoothing_1e+05_bootstraps_sigma_250000_div150_FILTERED.txt", header = TRUE, sep = "\t")
swa_output = read.table("batch_8_final_filtered_east_globalFST_kernel_smoothing_1e+05_bootstraps_sigma_250000_div150_FILTERED.txt", header = TRUE, sep = "\t")
dim(swa_output)
source("Plot_SlidingWindowAnalysis_Functions.R")
if(length(swa_output$position) != length(markers_per_window)){
print("ERROR: position and marker density vectors are not of equal lengths. you cannot run the just-plot function until you subset markers_per_window.")
} else{print("continue to plotting function.")}
just_plot_md(data = swa_output, marker_density = marker_data, Nb_bootstrap=100000, which.chromosome.analysis="all", which.chromosome.plot="all",export = TRUE, name="plots/East/batch_8_east_SWA_filtered")
library(readr)
library(ggplot2)
library(dplyr)
source("SlidingWindow_FindMarkers_Function.R")
source("Plot_SlidingWindowAnalysis_Functions.R")
east <- read_delim("batch_8_final_filtered_east_globalFST_kernel_smoothing_1e+05_bootstraps_sigma_250000_div150_FILTERED.txt", "\t", escape_double = FALSE, trim_ws = TRUE)
head(east)
west <- read_delim("West/batch_8_final_filtered_west_2reg_kernel_smoothing_1e+05_bootstraps_sigma_250000_div150_FILTERED.txt", "\t", escape_double = FALSE, trim_ws = TRUE)
head(west)
east_selection <- east %>%
mutate(positive = ifelse(`Fst/Fct` > upper_95, "1", "0")) %>%
mutate(negative = ifelse(`Fst/Fct` < lower_95, "1", "0")) %>%
mutate(selection = ifelse(positive == 1 | negative == 1, "Yes", "No"))
head(east_selection)
west_selection <- west %>%
mutate(positive = ifelse(`Fst/Fct` > upper_95, "1", "0")) %>%
mutate(negative = ifelse(`Fst/Fct` < lower_95, "1", "0")) %>%
mutate(selection = ifelse(positive == 1 | negative == 1, "Yes", "No"))
head(west_selection)
east_selection <- east %>%
mutate(positive = ifelse(`Fst.Fct` > upper_95, "1", "0")) %>%
mutate(negative = ifelse(`Fst.Fct` < lower_95, "1", "0")) %>%
mutate(selection = ifelse(positive == 1 | negative == 1, "Yes", "No"))
head(east_selection)
west_selection <- west %>%
mutate(positive = ifelse(`Fst.Fct` > upper_95, "1", "0")) %>%
mutate(negative = ifelse(`Fst.Fct` < lower_95, "1", "0")) %>%
mutate(selection = ifelse(positive == 1 | negative == 1, "Yes", "No"))
head(west_selection)
ggplot(data=east_selection, aes(x = `Fst.Fct`, y = upper_95)) +
geom_point(aes(color=positive)) +
ylim(-0.1,1) +
xlim(-0.1,1) +
labs(title="East v. West Sliding Window\nPositive Selection")
## negative selection: Fst below lower 95% confidence interval
ggplot(data=east_selection, aes(x = `Fst.Fct`, y = lower_95)) +
geom_point(aes(color=negative)) +
ylim(-0.1,0.1) +
xlim(-0.1,1) +
labs(title="East v. West Sliding Window\nNegative Selection")
ggplot(data=east_selection, aes(x = `Fst.Fct`, y = lower_95)) +
geom_point(aes(color=negative)) +
labs(title="East Sliding Window\nNegative Selection")
ggplot(data=east_selection, aes(x = `Fst.Fct`, y = upper_95)) +
geom_point(aes(color=positive)) +
labs(title="East Sliding Window\nPositive Selection")
ggplot(data=east_selection, aes(x = `Fst.Fct`, y = pvalue)) +
geom_point(aes(color=selection)) +
ylim(-0.1,1) +
xlim(-0.1,1) +
labs(title="East Sliding Window\nP values")
just_plot_overlay(data1 = east_selection, data2 = west_selection, Nb_divisions = 150, which.chromosome.analysis="all", which.chromosome.plot="all",export = TRUE, name="plots/SWA_East_West_Overlay")
warnings()
colnames(east_selection)
colnames(east_selection) <- c("chromosome","position","Fst/Fct","Mean_boostrap","lower_95","upper_95","pvalue","positive","negative","selection")
colnames(west_selection) <- c("chromosome","position","Fst/Fct","Mean_boostrap","lower_95","upper_95","pvalue","positive","negative","selection")
just_plot_overlay(data1 = east_selection, data2 = west_selection, Nb_divisions = 150, which.chromosome.analysis="all", which.chromosome.plot="all",export = TRUE, name="plots/SWA_East_West_Overlay")
east <- read_delim("batch_8_final_filtered_east_globalFST_matched_kernel_smoothing_1e+05_bootstraps_sigma_250000_div150.txt", "\t", escape_double = FALSE, trim_ws = TRUE)
head(east)
west <- read_delim("West/batch_8_final_filtered_west_matched_kernel_smoothing_1e+05_bootstraps_sigma_250000_div150.txt", "\t", escape_double = FALSE, trim_ws = TRUE)
head(west)
# Add columns for selection -------------------------------------------------------------
east_selection <- east %>%
mutate(positive = ifelse(`Fst.Fct` > upper_95, "1", "0")) %>%
mutate(negative = ifelse(`Fst.Fct` < lower_95, "1", "0")) %>%
mutate(selection = ifelse(positive == 1 | negative == 1, "Yes", "No"))
head(east_selection)
west_selection <- west %>%
mutate(positive = ifelse(`Fst.Fct` > upper_95, "1", "0")) %>%
mutate(negative = ifelse(`Fst.Fct` < lower_95, "1", "0")) %>%
mutate(selection = ifelse(positive == 1 | negative == 1, "Yes", "No"))
head(west_selection)
east_selection <- east %>%
mutate(positive = ifelse(`Fst/Fct` > upper_95, "1", "0")) %>%
mutate(negative = ifelse(`Fst/Fct` < lower_95, "1", "0")) %>%
mutate(selection = ifelse(positive == 1 | negative == 1, "Yes", "No"))
head(east_selection)
west_selection <- west %>%
mutate(positive = ifelse(`Fst/Fct` > upper_95, "1", "0")) %>%
mutate(negative = ifelse(`Fst/Fct` < lower_95, "1", "0")) %>%
mutate(selection = ifelse(positive == 1 | negative == 1, "Yes", "No"))
head(west_selection)
just_plot_overlay(data1 = east_selection, data2 = west_selection, Nb_divisions = 150, which.chromosome.analysis="all", which.chromosome.plot="all",export = TRUE, name="plots/SWA_East_West_MATCHED_Overlay")
east <- read_delim("batch_8_final_filtered_east_globalFST_kernel_smoothing_1e+05_bootstraps_sigma_250000_div150_FILTERED.txt", "\t", escape_double = FALSE, trim_ws = TRUE)
head(east)
# Add columns for selection -------------------------------------------------------------
east_selection <- east %>%
mutate(positive = ifelse(`Fst.Fct` > upper_95, "1", "0")) %>%
mutate(negative = ifelse(`Fst.Fct` < lower_95, "1", "0")) %>%
mutate(selection = ifelse(positive == 1 | negative == 1, "Yes", "No"))
head(east_selection)
east_filter <- east_selection %>%
filter(selection == "Yes")
dim(east_filter)
east_marker_data = read.table("batch_8_final_filtered_aligned_SWA_input_east_sorted.txt", header = TRUE, sep = "\t")
east_marker_data = read.table("batch_8_SWA_input_east_sorted.txt", header = TRUE, sep = "\t")
e_find_markers_output <- read.delim("East_Num_Name_Loci_Per_Window.txt", sep = "\t", header= FALSE, colClasses = c("character", "numeric", "numeric", "character"))
colnames(e_find_markers_output) <- c("chromosome", "position", "num_markers", "loci_names")
View(e_find_markers_output)
e_find_markers_filtered <- filter(e_find_markers_output, position %in% east_filter$position)
dim(e_find_markers_filtered)
View(e_find_markers_filtered)
dim(east_filter)
write.table(e_find_markers_filtered, "East_SWA_SelectionRegions_Markers.txt", sep = "\t",
row.names=FALSE, quote=FALSE)
View(plot_all)
setwd("D:/Pacific cod/DataAnalysis/PCod-Compare-repo/analyses/SlidingWindow")
## input data is the same as for sliding window analysis (the sorted alignment table output as a file in previous script)
swa_input = read.table("batch_8_SWA_input_east_sorted.txt", header = TRUE, sep = "\t")
head(swa_input)
source("SlidingWindow_FindMarkers_Function.R")
swa_output = read.table("batch_8_final_filtered_east_globalFST_kernel_smoothing_1e+05_bootstraps_sigma_250000_div150_FILTERED.txt", header = TRUE, sep = "\t")
dim(swa_output)
source("Plot_SlidingWindowAnalysis_Functions.R")
# options: just_plot_swa; just_plot_md; plot_all; plot_outlier
plot_outliers(data = swa_output, marker_density = output, Nb_bootstrap=100000, Nb_divisions = 150, which.chromosome.analysis="all", which.chromosome.plot="all",export = TRUE, name="plots/East/East_SWA_output_all_loci")
View(plot_all)
View(plot_outliers)
head(swa_input)
plot_outliers(data = swa_output, outlier_data = swa_input, Nb_bootstrap=100000, Nb_divisions = 150, which.chromosome.analysis="all", which.chromosome.plot="all",export = TRUE, name="plots/East/East_SWA_output_all_loci")
