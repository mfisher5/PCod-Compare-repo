}
# calculate the MAs_exp for all positions
MAs_exp = sapply(1:division, function(x) MA_calc(x, do.boot=FALSE))[1:division]
# calculate the MAs_bootstrap for all positions
MAs_bootstrap = sapply(1:Nb_bootstrap, function(x) sapply(1:division, function(y) MA_calc(y, do.boot=TRUE))[1:division])
#Calculate Confidence Interval
CI_all=t(apply(MAs_bootstrap,1,function(x) quantile(x,c(0.5,0.025,0.975),na.rm=TRUE)))
# Mean_boot = apply(MAs_bootstrap, 1, mean)
Sd_boot = apply(MAs_bootstrap, 1, sd)
Expected_MA = c(Expected_MA, MAs_exp)
CI_all_chromosomes=rbind(CI_all_chromosomes,CI_all)
Bootstrap_sd=c(Bootstrap_sd,Sd_boot)
min_lower95=min(CI_all,na.rm=TRUE)
max_upper95=max(CI_all,na.rm=TRUE)
min_MA=min(MAs_exp,na.rm=TRUE)
max_MA=max(MAs_exp,na.rm=TRUE)
min_lim=min(c(min_lower95,max_upper95,min_MA,max_MA),na.rm=TRUE)-0.02
max_lim=max(c(min_lower95,max_upper95,min_MA,max_MA),na.rm=TRUE)+0.02
where.NA = which(is.na(CI_all[,2]))
#plot(Positions_LG, MAs_exp, type="l", ylim=c(min_lim,max_lim), lwd=3, col="red", main = paste(ijk))
#lines(Positions_LG, CI_all[,1], col=1, lwd=2)
#lines(Positions_LG, CI_all[,2], col=rgb(0.3,0.1,0.4, 0.5))
#lines(Positions_LG, CI_all[,3], col=rgb(0.3,0.1,0.4, 0.5))
#if(length(where.NA)!=0) polygon(c(Positions_LG[-where.NA], rev(Positions_LG[-where.NA])), c(CI_all[,2][-where.NA], rev(CI_all[,3][-where.NA])), col=rgb(0.3,0.1,0.4, 0.5))
#if(length(where.NA)==0) polygon(c(Positions_LG, rev(Positions_LG)), c(CI_all[,2], rev(CI_all[,3])), col=rgb(0.3,0.1,0.4, 0.5))
positions_to_add=Positions_LG
chromosome=matrix(ijk,length(positions_to_add),1)
to_export_temp=cbind(chromosome,positions_to_add,MAs_exp,CI_all)
to_export_temp=as.data.frame(to_export_temp)
to_export=rbind(to_export,to_export_temp)
}
(P_value = pnorm(Expected_MA, CI_all_chromosomes[,1], Bootstrap_sd))
print (P_value)
to_export=cbind(to_export,P_value)
output<-paste(path_output,'/',name_output,'_kernel_smoothing_',Nb_bootstrap,'_bootstraps_sigma_',Sigma_sliding_window,'_div',division,'.txt', sep='')
colnames(to_export)=c("chromosome","position","Fst/Fct","Mean_boostrap","lower_95","upper_95","pvalue")
print(head(to_export))
write.table(to_export,file=output,quote=FALSE,sep="\t",col.names=TRUE,row.names=FALSE)
}
# Run on All Linkage Groups -----------------------------------------------
## note that this code will output a separate graph for each linkage group
plotting_reg_interval(Dat = align_data_sorted, Sigma_sliding_window=250000, Nb_bootstrap=100000, which.chromosome.analysis="all",which.chromosome.plot="all",division=150,name_output="batch_8_final_filtered_west_2reg",path_output=".")
# Run Across Linkage Groups -----------------------------------------------
## import new dataset with cumulative positions; "chromosome" should all = 1
cpos_data <- read.delim("batch_8_final_filtered_SWA_input_west_2reg_sorted_cpos.txt",header=TRUE)
head(cpos_data)
colnames(cpos_data) <- c("Locus","chromosome", "fst", "position")
# 150*23 = 3450 total divisions
plotting_reg_interval(Dat = cpos_data, Sigma_sliding_window=250000, Nb_bootstrap=100000, which.chromosome.analysis="PCodG",which.chromosome.plot="PCodG",division=3450,name_output="batch_8_west_cpos_output",path_output=".")
infile <- read.delim("batch_8_final_filtered_alignments_summary.txt",header=TRUE,
colClasses = c("character", "factor", "numeric"))
head(infile)
fstfile <- read.delim("West/batch_8_final_filtered_aligned_genepop_west_parsed_globalFst.txt",sep="\t", header=TRUE,
colClasses = c("character", "numeric"))
head(fstfile)
head(fstfile)
align_data <- left_join(fstfile,infile,by="Locus")
dim(align_data)
head(align_data)
infile <- read.delim("batch_8_final_filtered_alignments_summary.txt",header=TRUE,
colClasses = c("character", "character", "numeric"))
head(infile)
fstfile <- read.delim("West/batch_8_final_filtered_aligned_genepop_west_parsed_globalFst.txt",sep="\t", header=TRUE,
colClasses = c("character", "numeric"))
head(fstfile)
head(fstfile)
align_data <- left_join(fstfile,infile,by="Locus")
dim(align_data)
head(align_data)
colnames(align_data) <- c("Locus", "fst","chromosome", "position")
## write out to file to save unsorted dataframe (OPTIONAL)
write.table(align_data, "batch_8_SWA_input_west_globalFst.txt", quote=FALSE, sep="\t")
## sort data by chromosome number and locus position; write out to new file (NOT OPTIONAL!!)
align_data_sorted = align_data[order(align_data$chromosome, align_data$position),]
head(align_data_sorted)
write.table(align_data_sorted, "batch_8_SWA_input_west_sorted_globalFst.txt", quote=FALSE, sep="\t", row.names=FALSE)
plotting_reg_interval = function(Dat=mydata, Sigma_sliding_window=3, Nb_bootstrap=1000000, which.chromosome.analysis="all", which.chromosome.plot="All",division=100,name_output="SLA_output", path_output=".") {
if(which.chromosome.analysis!="all") Data.analysis = subset(Dat, subset=chromosome %in% which.chromosome.analysis)
if(which.chromosome.analysis=="all") Data.analysis = Dat
N_data = nrow(Data.analysis)
Nb_chromosome = unique(Data.analysis$chromosome)
## initialize parameters
Expected_MA = c()
Bootstrap_mean = c()
Bootstrap_sd = c()
CI_all_chromosomes=c()
Position_MA = c()
to_export=c()
to_export=as.data.frame(to_export)
## for each chromosome:
for (ijk in Nb_chromosome)
{
Data.part = subset(Dat, Dat$chromosome %in% ijk)
Size_window = 3*Sigma_sliding_window  # sliding window is 3 times the value of sigma in each direction
Beg_position_cM=min(Data.part$position)+Size_window ## calculations cannot start at 0, because it would be biased no values between -6 and 0cM for example
End_position_cM=max(Data.part$position)-Size_window
Beg_position = which(Data.part$position >=Beg_position_cM)[1] ### start at the first position as calculated before or at the first position where there is a data point (as sometimes, a large portion of the chromosome is made of duplicated loci --> not kept for population studies)
End_position = which(Data.part$position >= (max(End_position_cM)))[1]
Positions_LG=seq(from=Beg_position_cM,to=End_position_cM,length.out=division)  ## these position will be equidistant
MA_calc = function(x, do.boot=FALSE) ## MA=Moving Average
{
if(do.boot==TRUE) Fst_data = Dat$fst[sample(1:nrow(Dat), size= nrow(Data.part), replace=TRUE)]
if(do.boot==FALSE) Fst_data = Data.part$fst
MA_windows = which(Data.part$position >= (Positions_LG[x]-Size_window) & Data.part$position <= (Positions_LG[x]+Size_window))
MA_weight = exp(-(Data.part$position[MA_windows]-Positions_LG[x])^2/(2*Sigma_sliding_window^2))
MA_val = sum(Fst_data[MA_windows]*MA_weight)/sum(MA_weight)
}
# calculate the MAs_exp for all positions
MAs_exp = sapply(1:division, function(x) MA_calc(x, do.boot=FALSE))[1:division]
# calculate the MAs_bootstrap for all positions
MAs_bootstrap = sapply(1:Nb_bootstrap, function(x) sapply(1:division, function(y) MA_calc(y, do.boot=TRUE))[1:division])
#Calculate Confidence Interval
CI_all=t(apply(MAs_bootstrap,1,function(x) quantile(x,c(0.5,0.025,0.975),na.rm=TRUE)))
# Mean_boot = apply(MAs_bootstrap, 1, mean)
Sd_boot = apply(MAs_bootstrap, 1, sd)
Expected_MA = c(Expected_MA, MAs_exp)
CI_all_chromosomes=rbind(CI_all_chromosomes,CI_all)
Bootstrap_sd=c(Bootstrap_sd,Sd_boot)
min_lower95=min(CI_all,na.rm=TRUE)
max_upper95=max(CI_all,na.rm=TRUE)
min_MA=min(MAs_exp,na.rm=TRUE)
max_MA=max(MAs_exp,na.rm=TRUE)
min_lim=min(c(min_lower95,max_upper95,min_MA,max_MA),na.rm=TRUE)-0.02
max_lim=max(c(min_lower95,max_upper95,min_MA,max_MA),na.rm=TRUE)+0.02
where.NA = which(is.na(CI_all[,2]))
#plot(Positions_LG, MAs_exp, type="l", ylim=c(min_lim,max_lim), lwd=3, col="red", main = paste(ijk))
#lines(Positions_LG, CI_all[,1], col=1, lwd=2)
#lines(Positions_LG, CI_all[,2], col=rgb(0.3,0.1,0.4, 0.5))
#lines(Positions_LG, CI_all[,3], col=rgb(0.3,0.1,0.4, 0.5))
#if(length(where.NA)!=0) polygon(c(Positions_LG[-where.NA], rev(Positions_LG[-where.NA])), c(CI_all[,2][-where.NA], rev(CI_all[,3][-where.NA])), col=rgb(0.3,0.1,0.4, 0.5))
#if(length(where.NA)==0) polygon(c(Positions_LG, rev(Positions_LG)), c(CI_all[,2], rev(CI_all[,3])), col=rgb(0.3,0.1,0.4, 0.5))
positions_to_add=Positions_LG
chromosome=matrix(ijk,length(positions_to_add),1)
to_export_temp=cbind(chromosome,positions_to_add,MAs_exp,CI_all)
to_export_temp=as.data.frame(to_export_temp)
to_export=rbind(to_export,to_export_temp)
print("completed calculations for chromosome:")
print(ijk)
}
(P_value = pnorm(Expected_MA, CI_all_chromosomes[,1], Bootstrap_sd))
print (P_value)
to_export=cbind(to_export,P_value)
output<-paste(path_output,'/',name_output,'_kernel_smoothing_',Nb_bootstrap,'_bootstraps_sigma_',Sigma_sliding_window,'_div',division,'.txt', sep='')
colnames(to_export)=c("chromosome","position","Fst/Fct","Mean_boostrap","lower_95","upper_95","pvalue")
print(head(to_export))
write.table(to_export,file=output,quote=FALSE,sep="\t",col.names=TRUE,row.names=FALSE)
}
plotting_reg_interval(Dat = align_data_sorted, Sigma_sliding_window=250000, Nb_bootstrap=100000, which.chromosome.analysis="all",which.chromosome.plot="all",division=150,name_output="batch_8_final_filtered_west_globalFst",path_output=".")
setwd("D:/Pacific cod/DataAnalysis/PCod-Compare-repo/stacks_b8_wgenome_r05")
mydat <- read.delim("batch_8_final_filtered_aligned_GenotypesMat_west.txt", sep=" ")
head(mydat)
mydat <- read.delim("batch_8_final_filtered_aligned_GenotypesMat_west.txt", sep=" ", header=FALSE)
head(mydat)
dim(mydat)
mydat <- read.delim("batch_8_final_filtered_aligned_GenotypesMat_west.txt", sep="  ", header=FALSE)
mydat <- read.delim("batch_8_final_filtered_aligned_GenotypesMat_west.txt", sep="  ", header=FALSE)
mydat <- read.delim("batch_8_final_filtered_aligned_GenotypesMat_west.txt", sep=" ", header=FALSE)
dim(mydat)
ncols(mydat)
ncol(mydat)
genotypes <- unique(mydat[,2])
head(genotypes)
genotypes <- unique(mydat[,1])
genotypes
genotypes <- unique(mydat[,2])
genotypes
genotypes <- unique(mydat[2,])
genotypes
genotypes <- unique(mydat[1,])
genotypes
genotypes <- unique(mydat[3,])
genotypes
genotypes <- unique(mydat[,3])
genotypes
unique(mydat[,2])
for(i in seq(2,ncols(mydat),1)){
total = total + 1
genotypes <- unique(mydat[,i])
if(length(genotypes) > 2){
poly = poly + 1
}
}
for(i in seq(2,ncol(mydat),1)){
total = total + 1
genotypes <- unique(mydat[,i])
if(length(genotypes) > 2){
poly = poly + 1
}
}
poly <- 0
total <- 0
for(i in seq(2,ncol(mydat),1)){
total = total + 1
genotypes <- unique(mydat[,i])
if(length(genotypes) > 2){
poly = poly + 1
}
}
poly
total
poly / total
mydat <- read.delim("batch_8_final_filtered_aligned_GenotypesMat_east.txt", sep=" ", header=FALSE)
dim(mydat)
ncols(mydat)
poly <- 0
total <- 0
for(i in seq(2,ncol(mydat),1)){
total = total + 1
genotypes <- unique(mydat[,i])
if(length(genotypes) > 2){
poly = poly + 1
}
}
poly / total
unique(mydat[,1])
unique(mydat[,2])
unique(mydat[,3])
mydat[,3]
mydat <- read.delim("batch_8_final_filtered_aligned_GenotypesMat_east.txt", sep=" ", header=FALSE)
dim(mydat)
poly <- 0
total <- 0
for(i in seq(2,ncol(mydat),1)){
total = total + 1
genotypes <- unique(mydat[,i])
if(length(genotypes) > 2){
poly = poly + 1
}
}
unique(mydat[,2])
mydat[,3]
poly / total
library(adegenet)
library(hierfstat)
library (gplots)
setwd("D:/Pacific cod/DataAnalysis/PCod-Compare-repo/analyses/PCA")
my_data_neutral <- read.genepop("../../stacks_b8_wgenome_r05/batch_8_final_filtered_aligned_genepop.gen")
(summary(my_data))
(summary(my_data_neutral))
mydata <- read.genepop("../../stacks_b8_wgenome_r05/batch_8_final_filtered_aligned_genepop.gen")
X <- scaleGen(my_data, NA.method="mean")
X <- scaleGen(mydata, NA.method="mean")
pca_mydata <- dudi.pca(X,cent=FALSE,scale=FALSE)
barplot(pca_mydata$eig[1:50],main="PCA eigenvalues", col=heat.colors(50))
pca_mydata <- dudi.pca(X,cent=FALSE,scale=FALSE,scannf=FALSE,nf=2) #nf = number to retain
barplot(pca_mydata$eig[1:50],main="PCA eigenvalues", col=heat.colors(50))
summary(pca_mydata)
col <- c("deepskyblue4","deepskyblue4","deepskyblue4","green4","deepskyblue4","green4","darkorchid2","darkorchid2","darkorchid2","darkorchid2","darkorchid2","darkorchid2")
col_leg <- c("deepskyblue4","green4","darkorchid2")
#Point shapes for legend (here is by region)
points_leg <- c(16,16,15)
#to graph with lines between samples
s.class(pca_outliers$li, fac=pop(my_data_outliers),
col=col, #color of points. will retain lines between points
clabel=0, #remove population labels
cellipse=0, #remove ellipses; to add back in, make >=1
cpoint=1,
grid=FALSE, #otherwise will have light gray grid markers
pch=c(16,16,16,16,16,16,15,15,15,15,15,15)[as.numeric(pop(my_data_outliers))], #change point shapes
axesell=TRUE)
pop(mydata)
col <- c("deepskyblue4","deepskyblue4","deepskyblue4","darkslategray","chartreuse4","deepskyblue4","darkslategray","deepskyblue4","darkorchid2","darkorchid2","darkorchid2","darkorchid2","darkorchid2","darkorchid2")
col_leg <- c("deepskyblue4","darkslategray","chartreuse4","darkorchid2")
points_leg <- c(16,16,16,15)
s.class(pca_mydata$li, fac=pop(mydata),
col=col, #color of points. will retain lines between points
clabel=0, #remove population labels
cellipse=0, #remove ellipses; to add back in, make >=1
cpoint=1,
grid=FALSE, #otherwise will have light gray grid markers
pch=c(16,16,16,16,16,16,15,15,15,15,15,15)[as.numeric(pop(my_data_outliers))], #change point shapes
axesell=TRUE)
s.class(pca_mydata$li, fac=pop(mydata),
col=col, #color of points. will retain lines between points
clabel=0, #remove population labels
cellipse=0, #remove ellipses; to add back in, make >=1
cpoint=1,
grid=FALSE, #otherwise will have light gray grid markers
pch=c(16,16,16,16,16,16,15,15,15,15,15,15)[as.numeric(pop(mydata))], #change point shapes
axesell=TRUE)
pop(mydata)
levels(pop(mydata))
col <- c("deepskyblue4","deepskyblue4","deepskyblue4","aquamarine3","chartreuse4","deepskyblue4","deepskyblue4","darkslategray","deepskyblue4","darkorchid2","darkorchid2","darkorchid2","darkorchid2","darkorchid2","darkorchid2")
col_leg <- c("deepskyblue4","darkslategray","chartreuse4","darkorchid2")
points_leg <- c(16,16,16,15)
s.class(pca_mydata$li, fac=pop(mydata),
col=col, #color of points. will retain lines between points
clabel=0, #remove population labels
cellipse=0, #remove ellipses; to add back in, make >=1
cpoint=1,
grid=FALSE, #otherwise will have light gray grid markers
pch=c(16,16,16,16,16,16,15,15,15,15,15,15)[as.numeric(pop(mydata))], #change point shapes
axesell=TRUE)
col <- c("deepskyblue4","deepskyblue4","deepskyblue4","aquamarine3","chartreuse4","deepskyblue4","deepskyblue4","aquamarine3","deepskyblue4","darkorchid2","darkorchid2","darkorchid2","darkorchid2","darkorchid2","darkorchid2")
col_leg <- c("deepskyblue4","darkslategray","chartreuse4","darkorchid2")
points_leg <- c(16,16,16,15)
s.class(pca_mydata$li, fac=pop(mydata),
col=col, #color of points. will retain lines between points
clabel=0, #remove population labels
cellipse=0, #remove ellipses; to add back in, make >=1
cpoint=1,
grid=FALSE, #otherwise will have light gray grid markers
pch=c(16,16,16,16,16,16,15,15,15,15,15,15)[as.numeric(pop(mydata))], #change point shapes
axesell=TRUE)
s.class(pca_mydata$li, fac=pop(mydata),
col=col, #color of points. will retain lines between points
clabel=0, #remove population labels
cellipse=0, #remove ellipses; to add back in, make >=1
cpoint=1,
grid=FALSE, #otherwise will have light gray grid markers
pch=c(16,16,16,16,16,16,16,16,16,15,15,15,15,15,15,15,15)[as.numeric(pop(mydata))], #change point shapes
axesell=TRUE)
col_leg <- c("deepskyblue4","aquamarine3","chartreuse4","darkorchid2")
legend (x=10,y=25, legend = c("West - Southern Coast", "West - Western Coast", "West - Eastern Coast","East"), col = col_leg, border = FALSE, bty = "n", cex = 0.9, pt.cex=1.5, title = "Population",pch=points_leg)
legend (x=10,y=25, legend = c("West - Southern Coast", "West - Western Coast", "West - Eastern Coast","East"), col = col_leg, border = FALSE, bty = "n", cex = 1.5, pt.cex=1.5, title = "Population",pch=points_leg)
legend (x=10,y=25, legend = c("West - Southern Coast", "West - Western Coast", "West - Eastern Coast","East"), col = col_leg, border = FALSE, bty = "n", cex = 1.2, pt.cex=1.5, title = "Population",pch=points_leg)
legend (x=10,y=30, legend = c("West - Southern Coast", "West - Western Coast", "West - Eastern Coast","East"), col = col_leg, border = FALSE, bty = "n", cex = 1.2, pt.cex=1.5, title = "Population",pch=points_leg)
legend (x=10,y=35, legend = c("West - Southern Coast", "West - Western Coast", "West - Eastern Coast","East"), col = col_leg, border = FALSE, bty = "n", cex = 1.2, pt.cex=1.5, title = "Population",pch=points_leg)
legend (x=13,y=35, legend = c("West - Southern Coast", "West - Western Coast", "West - Eastern Coast","East"), col = col_leg, border = FALSE, bty = "n", cex = 1.2, pt.cex=1.5, title = "Population",pch=points_leg)
legend (x=15,y=35, legend = c("West - Southern Coast", "West - Western Coast", "West - Eastern Coast","East"), col = col_leg, border = FALSE, bty = "n", cex = 1.2, pt.cex=1.5, title = "Population",pch=points_leg)
s.class(pca_mydata$li, fac=pop(mydata),
col=col, #color of points. will retain lines between points
clabel=0, #remove population labels
cellipse=0, #remove ellipses; to add back in, make >=1
cpoint=1,
grid=FALSE, #otherwise will have light gray grid markers
pch=c(16,16,16,16,16,16,16,16,16,15,15,15,15,15,15,15,15)[as.numeric(pop(mydata))], #change point shapes
axesell=TRUE)
legend (x=15,y=35, legend = c("West - Southern Coast", "West - Western Coast", "West - Eastern Coast","East"), col = col_leg, border = FALSE, bty = "n", cex = 1.2, pt.cex=1.5, title = "Population",pch=points_leg)
s.class(pca_mydata$li, fac=pop(mydata),
col=col, #color of points. will retain lines between points
clabel=0, #remove population labels
cellipse=0, #remove ellipses; to add back in, make >=1
cpoint=1,
grid=FALSE, #otherwise will have light gray grid markers
pch=c(16,16,16,16,16,16,16,16,16,15,15,15,15,15,15,15,15)[as.numeric(pop(mydata))], #change point shapes
axesell=TRUE)
legend (x=15,y=35, legend = c("West - Southern Coast", "West - Western Coast", "West - Eastern Coast","East"), col = col_leg, border = FALSE, bty = "n", cex = 1.2, pt.cex=1.5, title = "Population",pch=points_leg)
legend (x=10,y=35, legend = c("West - Southern Coast", "West - Western Coast", "West - Eastern Coast","East"), col = col_leg, border = FALSE, bty = "n", cex = 1.2, pt.cex=1.5, title = "Population",pch=points_leg)
s.class(pca_mydata$li, fac=pop(mydata),
col=col, #color of points. will retain lines between points
clabel=0, #remove population labels
cellipse=0, #remove ellipses; to add back in, make >=1
cpoint=1,
grid=FALSE, #otherwise will have light gray grid markers
pch=c(16,16,16,16,16,16,16,16,16,15,15,15,15,15,15,15,15)[as.numeric(pop(mydata))], #change point shapes
axesell=TRUE)
legend (x=10,y=35, legend = c("West - Southern Coast", "West - Western Coast", "West - Eastern Coast","East"), col = col_leg, border = FALSE, bty = "n", cex = 1.2, pt.cex=1.5, title = "Population",pch=points_leg)
legend (x=10,y=40, legend = c("West - Southern Coast", "West - Western Coast", "West - Eastern Coast","East"), col = col_leg, border = FALSE, bty = "n", cex = 1.2, pt.cex=1.5, title = "Population",pch=points_leg)
legend (x=10,y=45, legend = c("West - Southern Coast", "West - Western Coast", "West - Eastern Coast","East"), col = col_leg, border = FALSE, bty = "n", cex = 1.2, pt.cex=1.5, title = "Population",pch=points_leg)
s.class(pca_mydata$li, fac=pop(mydata),
col=col, #color of points. will retain lines between points
clabel=0, #remove population labels
cellipse=0, #remove ellipses; to add back in, make >=1
cpoint=1,
grid=FALSE, #otherwise will have light gray grid markers
pch=c(16,16,16,16,16,16,16,16,16,15,15,15,15,15,15,15,15)[as.numeric(pop(mydata))], #change point shapes
axesell=TRUE)
legend (x=10,y=40, legend = c("West - Southern Coast", "West - Western Coast", "West - Eastern Coast","East"), col = col_leg, border = FALSE, bty = "n", cex = 1.2, pt.cex=1.5, title = "Population",pch=points_leg)
add.scatter.eig(pca_outliers$eig[1:50],posi="bottomright", 3,2,1,ratio=.3)
eig.perc <- 100*pca_outliers$eig/sum(pca_outliers$eig)
add.scatter.eig(pca_mydata$eig[1:50],posi="bottomright", 3,2,1,ratio=.3)
s.class(pca_mydata$li, fac=pop(mydata),
col=col, #color of points. will retain lines between points
clabel=0, #remove population labels
cellipse=0, #remove ellipses; to add back in, make >=1
cpoint=1,
grid=FALSE, #otherwise will have light gray grid markers
pch=c(16,16,16,16,16,16,16,16,16,15,15,15,15,15,15,15,15)[as.numeric(pop(mydata))], #change point shapes
axesell=TRUE)
# add legend
add.scatter.eig(pca_mydata$eig[1:50],posi="bottomright", 3,2,1,ratio=.3)
to graph with lines between samples
s.class(pca_mydata$li, fac=pop(mydata),
col=col, #color of points. will retain lines between points
clabel=0, #remove population labels
cellipse=0, #remove ellipses; to add back in, make >=1
cpoint=1,
grid=FALSE, #otherwise will have light gray grid markers
pch=c(16,16,16,16,16,16,16,16,16,15,15,15,15,15,15,15,15)[as.numeric(pop(mydata))], #change point shapes
axesell=TRUE)
# add legend
legend (x=10,y=40, legend = c("West - Southern Coast", "West - Western Coast", "West - Eastern Coast","East"), col = col_leg, border = FALSE, bty = "n", cex = 1.2, pt.cex=1.5, title = "Population",pch=points_leg)
642/4287
444/4287
167/4287
bscan_direct <- "D:/Pacific cod/DataAnalysis/PCod-Compare-repo/analyses/R"
#directory with bayescan output (both)
workingdirect <- "D:/Pacific cod/DataAnalysis/PCod-Compare-repo/analyses/outliers/Bayescan"
#fst file (Bayescan script)
fst_file <- "batch_8_eastwest_p100_output_fst.txt"
#.sel file (Bayescan script)
sel_file <- "batch_8_eastwest_p100_output.sel"
# output file (both)
outfile <- "batch_8_eastwest_p100_outliers.csv"
#set false discovery rate cutoff (both)
fdr <- 0.05
#fst file edited to include stacks locus IDs (alt. function)
fst_edit <- "batch_8_eastwest_Bayescan_p100_fst_stacksIDs.txt"
#plot title (alt. function)
plt.title = "Bayescan Outliers - East v. West (Prior100)"
# Parse / Plot Output with Bayescan Plot Function --------------------------------------------
## my r script is in this directory
setwd(bscan_direct)
## source r script with plot function
source("BAYESCAN_plot_R.r")
## set wd to output file location
setwd(workingdirect)
## produce a list of outlier loci, and a plot of fst v. log10(qvalue)
plot_bayescan(fst_file, FDR = fdr) #FDR sets cutoff
## produce a plot of posterior distribution of any parameter
setwd("D:/Pacific cod/DataAnalysis/PCod-Compare-repo/analyses/outliers/Bayescan/batch_8_final_eastwest_reruns")
#fst file (Bayescan script)
fst_file <- "batch_8_eastwest_p100_rerun_output_fst.txt"
#.sel file (Bayescan script)
sel_file <- "batch_8_eastwest_p100_rerun_output.sel"
# output file (both)
outfile <- "batch_8_eastwest_p100_rerun_outliers.csv"
# output file (both)
outfile <- "batch_8_eastwest_p100_rerun_outliers.csv"
#set false discovery rate cutoff (both)
fdr <- 0.05
## produce a list of outlier loci, and a plot of fst v. log10(qvalue)
plot_bayescan(fst_file, FDR = fdr) #FDR sets cutoff
fst_file <- "batch_8_eastwest_all_Bayescan_p100_rerun_output_fst.txt"
#fst file (Bayescan script)
fst_file <- "batch_8_eastwest_all_Bayescan_p100_rerun_output_fst.txt"
#.sel file (Bayescan script)
sel_file <- "batch_8_eastwest_all_Bayescan_p100_rerun_output.sel"
# output file (both)
outfile <- "batch_8_eastwest_all_Bayescan_p100_rerun_outliers.csv"
#set false discovery rate cutoff (both)
plot_bayescan(fst_file, FDR = fdr) #FDR sets cutoff
fst_file <- "batch_8_eastwest_bypop_Bayescan_p100_output_fst.txt"
sel_file <- "batch_8_eastwest_bypop_Bayescan_p100_rerun_output.sel"
outfile <- "batch_8_eastwest_bypop_Bayescan_p100_rerun_outliers.csv"
plot_bayescan(fst_file, FDR = fdr) #FDR sets cutoff
mydata = read.table(sel_file, colClasses = "numeric")
sel_file <- "batch_8_eastwest_bypop_Bayescan_p100_output.sel"
outfile <- "batch_8_eastwest_bypop_Bayescan_p100_outliers.csv"
## produce a plot of posterior distribution of any parameter
mydata = read.table(sel_file, colClasses = "numeric")
parameter = "Fst1"
plot(density(mydata[[parameter]]), xlab=parameter, main=paste(parameter,"posterior distribution"))
library(devtools)
source("http://bioconductor.org/biocLite.R")
biocLite("qvalue")
setwd("D:/Pacific cod/DataAnalysis/PCod-Compare-repo/analyses/Outliers/OutFLANK")
loci <- read.table("batch_8_east_SNPmat_locusnames.txt", header=F)
pops <- read.table("batch_8_east_SNPmat_popnames.txt", header=F)
data = read.csv("batch_8_east_SNPmat.txt", header = FALSE, sep = "\t")
datamat = as.matrix(data)
FstDataFrame <- MakeDiploidFSTMat(SNPmat = data, locusNames = loci, popNames = pops)
####### Identify Outliers #######
mydata.outflank <- OutFLANK(FstDataFrame, LeftTrimFraction=0.05, RightTrimFraction=0.05, Hmin=0.1, NumberOfSamples=6, qthreshold=0.05)
# take a look at the output!
typeof(mydata.outflank) # spoiler: it's a list.
dim(mydata.outflank$results[which(mydata.outflank$results$OutlierFlag==T),]) # how many outliers do you have? 1st #
library(OutFLANK)
FstDataFrame <- MakeDiploidFSTMat(SNPmat = data, locusNames = loci, popNames = pops)
####### Identify Outliers #######
mydata.outflank <- OutFLANK(FstDataFrame, LeftTrimFraction=0.05, RightTrimFraction=0.05, Hmin=0.1, NumberOfSamples=6, qthreshold=0.05)
# take a look at the output!
typeof(mydata.outflank) # spoiler: it's a list.
dim(mydata.outflank$results[which(mydata.outflank$results$OutlierFlag==T),]) # how many outliers do you have? 1st #
OutFLANKResultsPlotter(mydata.outflank)
plot(mydata.outflank$results$FST, mydata.outflank$results$He, xlab = "Per Locus FST", ylab = "Per Locus He")
loci <- read.table("batch_8_eastwest_SNPmat_locusnames.txt", header=F)
pops <- read.table("batch_8_eastwest_SNPmat_popnames.txt", header=F)
data = read.csv("batch_8_eastwest_SNPmat.txt", header = FALSE, sep = "\t")
datamat = as.matrix(data)
FstDataFrame <- MakeDiploidFSTMat(SNPmat = data, locusNames = loci, popNames = pops)
mydata.outflank <- OutFLANK(FstDataFrame, LeftTrimFraction=0.05, RightTrimFraction=0.05, Hmin=0.1, NumberOfSamples=6, qthreshold=0.05)
OutFLANKResultsPlotter(mydata.outflank)
plot(mydata.outflank$results$FST, mydata.outflank$results$He, xlab = "Per Locus FST", ylab = "Per Locus He")
OutFLANKResultsPlotter(mydata.outflank, xlab = "Differentiation")
?OutFLANKResultsPlotter
OutFLANKResultsPlotter(mydata.outflank, titletext = All Data, without sample size correction)
OutFLANKResultsPlotter(mydata.outflank, titletext = "All Data, without sample size correction")
OutFLANKResultsPlotter(mydata.outflank, titletext = "All Data, without sample size correction")
OutFLANKResultsPlotter(mydata.outflank, titletext = "All Data")
plot(mydata.outflank$results$FST, mydata.outflank$results$He, xlab = "Per Locus FST", ylab = "Per Locus He")
plot(mydata.outflank$results$FST, mydata.outflank$results$He, xlab = "Per Locus FST", ylab = "Per Locus He", title = "AllData")
?plot
plot(mydata.outflank$results$FST, mydata.outflank$results$He, xlab = "Per Locus FST", ylab = "Per Locus He", main = "AllData")
plot(mydata.outflank$results$FST, mydata.outflank$results$He, xlab = "Per Locus FST", ylab = "Per Locus He", main = "All Data")
plot(mydata.outflank$results$FST, mydata.outflank$results$He, xlab = "Per Locus Fst", ylab = "Per Locus He", main = "All Data")
loci <- read.table("batch_8_east_SNPmat_locusnames.txt", header=F)
pops <- read.table("batch_8_east_SNPmat_popnames.txt", header=F)
data = read.csv("batch_8_east_SNPmat.txt", header = FALSE, sep = "\t")
datamat = as.matrix(data)
FstDataFrame <- MakeDiploidFSTMat(SNPmat = data, locusNames = loci, popNames = pops)
mydata.outflank <- OutFLANK(FstDataFrame, LeftTrimFraction=0.05, RightTrimFraction=0.05, Hmin=0.1, NumberOfSamples=6, qthreshold=0.05)
OutFLANKResultsPlotter(mydata.outflank, titletext = "Eastern Population")
plot(mydata.outflank$results$FST, mydata.outflank$results$He, xlab = "Per Locus Fst", ylab = "Per Locus He", main = "Eastern Population")
loci <- read.table("batch_8_west_SNPmat_locusnames.txt", header=F)
loci <- read.table("batch_8_west_bypop_SNPmat_locusnames.txt", header=F)
pops <- read.table("batch_8_west_bypop_SNPmat_popnames.txt", header=F)
data = read.csv("batch_8_west_bypop_SNPmat.txt", header = FALSE, sep = "\t")
datamat = as.matrix(data)
FstDataFrame <- MakeDiploidFSTMat(SNPmat = data, locusNames = loci, popNames = pops)
mydata.outflank <- OutFLANK(FstDataFrame, LeftTrimFraction=0.05, RightTrimFraction=0.05, Hmin=0.1, NumberOfSamples=6, qthreshold=0.05)
mydata.outflank <- OutFLANK(FstDataFrame, LeftTrimFraction=0.05, RightTrimFraction=0.05, Hmin=0.1, NumberOfSamples=2, qthreshold=0.05)
OutFLANKResultsPlotter(mydata.outflank, titletext = "Western Population")
plot(mydata.outflank$results$FST, mydata.outflank$results$He, xlab = "Per Locus Fst", ylab = "Per Locus He", main = "Western Population")
loci <- read.table("batch_8_eastwest_SNPmat_locusnames.txt", header=F)
pops <- read.table("batch_8_eastwest_SNPmat_popnames.txt", header=F)
data = read.csv("batch_8_eastwest_SNPmat.txt", header = FALSE, sep = "\t")
datamat = as.matrix(data)
FstDataFrame <- MakeDiploidFSTMat(SNPmat = data, locusNames = loci, popNames = pops)
mydata.outflank <- OutFLANK(FstDataFrame, LeftTrimFraction=0.05, RightTrimFraction=0.05, Hmin=0.1, NumberOfSamples=12, qthreshold=0.05)
OutFLANKResultsPlotter(mydata.outflank, titletext = "Western Population")
