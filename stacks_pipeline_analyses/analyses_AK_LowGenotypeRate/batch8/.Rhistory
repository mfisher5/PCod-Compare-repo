align_data <- read.delim("../SlidingWindow/EastWest/batch_8_final_filtered_aligned_SWA_input_eastwest_sorted_cpos.txt",sep="\t",header=TRUE)
align_data <- read.delim("../SlidingWindow/EastvWest/batch_8_final_filtered_aligned_SWA_input_eastwest_sorted_cpos.txt",sep="\t",header=TRUE)
dim(align_data)
colnames(align_data)
colnames(align_data) <- c("Locus", "fst", "chromosome", "position")
View(align_data)
align_data <- mutate(align_data, bin = ntile(position, 200))
View(align_data)
## create actual bin values
newbins = seq(0, max(align_data$position), length.out = 200)
head(newbins)
## use dplyr bins to create vector of actual bin values
newbinlist <- c()
for(i in seq(1,200)){
bindata <- filter(align_data, bin == i)
newbin <- max(bindata$position)
newbinlist <- c(newbinlist, rep(newbin, times = length(bindata$position)))
}
## check the number of bin values created is = length of data frame
length(newbinlist)
## remove dplyr bins and add in new bins to data frame
align_data_binned <- align_data %>%
select(c("Locus", "fst", "chromosome","position")) %>%
mutate(bin = newbinlist)
View(align_data_binned)
ggplot(align_data_binned, aes(x=bin, y=fst)) +
geom_point(size=1) +
ggtitle("Per Locus Fst, East v. West Pacific cod") +
xlab("Atlantic cod Linkage Group") +
ylab(expression("F"[st])) +
theme(plot.title=element_text(hjust=0.5, size = 20)) +
theme(axis.title=element_text(size = 16)) +
theme(axis.text.x = element_blank()) +
theme(panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(), panel.background = element_blank()) +
scale_y_continuous(limits=(c(-0.02,1)), expand=c(0,0)) +
scale_x_continuous(limits=c(0,598315121), expand=c(0,0)) +
annotate("rect", xmin = 0, xmax = 28303952, ymin = 0, ymax = 1.0, alpha = 0.2) +
annotate("rect", xmin = 52358358, xmax = 81809413, ymin = 0, ymax = 1.0, alpha = 0.2) +
annotate("rect", xmin = 116614735, xmax = 140688790, ymin = 0, ymax = 1.0, alpha = 0.2) +
annotate("rect", xmin = 166153410, xmax = 197386287, ymin = 0, ymax = 1.0, alpha = 0.2) +
annotate("rect", xmin = 224183173, xmax = 249565487, ymin = 0, ymax = 1.0, alpha = 0.2) +
annotate("rect", xmin = 274869793, xmax = 303812761, ymin = 0, ymax = 1.0, alpha = 0.2) +
annotate("rect", xmin = 331110735, xmax = 356787470, ymin = 0, ymax = 1.0, alpha = 0.2) +
annotate("rect", xmin = 386084402, xmax = 412682361, ymin = 0, ymax = 1.0, alpha = 0.2) +
annotate("rect", xmin = 443775604, xmax = 462924811, ymin = 0, ymax = 1.0, alpha = 0.2) +
annotate("rect", xmin = 485479066, xmax = 506655326, ymin = 0, ymax = 1.0, alpha = 0.2) +
annotate("rect", xmin = 530804459, xmax = 553314763, ymin = 0, ymax = 1.0, alpha = 0.2) +
annotate("rect", xmin = 575050466, xmax = 598315120, ymin = 0, ymax = 1.0, alpha = 0.2)
align_data <- read.delim("../SlidingWindow/West/batch_8_SWA_input_west_sorted_cpos.txt",sep="\t",header=TRUE)
dim(align_data)
## rename columns for R script function calls
colnames(align_data) <- c("Locus", "fst", "chromosome", "position")
View(align_data)
align_data <- mutate(align_data, bin = ntile(position, 200))
## create actual bin values
newbins = seq(0, max(align_data$position), length.out = 200)
head(newbins)
## use dplyr bins to create vector of actual bin values
newbinlist <- c()
for(i in seq(1,200)){
bindata <- filter(align_data, bin == i)
newbin <- max(bindata$position)
newbinlist <- c(newbinlist, rep(newbin, times = length(bindata$position)))
}
## check the number of bin values created is = length of data frame
length(newbinlist)
## remove dplyr bins and add in new bins to data frame
align_data_binned <- align_data %>%
select(c("Locus", "fst", "chromosome","position")) %>%
mutate(bin = newbinlist)
View(align_data_binned)
# Plot binned Manhattan Plot ----------------------------------------------
ggplot(align_data_binned, aes(x=bin, y=fst)) +
geom_point(size=1) +
ggtitle("Per Locus Fst, West Pacific cod") +
xlab("Atlantic cod Linkage Group") +
ylab(expression("F"[st])) +
theme(plot.title=element_text(hjust=0.5, size = 20)) +
theme(axis.title=element_text(size = 16)) +
theme(axis.text.x = element_blank()) +
theme(panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(), panel.background = element_blank()) +
scale_y_continuous(limits=(c(-0.02,1)), expand=c(0,0)) +
scale_x_continuous(limits=c(0,598315121), expand=c(0,0)) +
annotate("rect", xmin = 0, xmax = 28303952, ymin = 0, ymax = 1.0, alpha = 0.2) +
annotate("rect", xmin = 52358358, xmax = 81809413, ymin = 0, ymax = 1.0, alpha = 0.2) +
annotate("rect", xmin = 116614735, xmax = 140688790, ymin = 0, ymax = 1.0, alpha = 0.2) +
annotate("rect", xmin = 166153410, xmax = 197386287, ymin = 0, ymax = 1.0, alpha = 0.2) +
annotate("rect", xmin = 224183173, xmax = 249565487, ymin = 0, ymax = 1.0, alpha = 0.2) +
annotate("rect", xmin = 274869793, xmax = 303812761, ymin = 0, ymax = 1.0, alpha = 0.2) +
annotate("rect", xmin = 331110735, xmax = 356787470, ymin = 0, ymax = 1.0, alpha = 0.2) +
annotate("rect", xmin = 386084402, xmax = 412682361, ymin = 0, ymax = 1.0, alpha = 0.2) +
annotate("rect", xmin = 443775604, xmax = 462924811, ymin = 0, ymax = 1.0, alpha = 0.2) +
annotate("rect", xmin = 485479066, xmax = 506655326, ymin = 0, ymax = 1.0, alpha = 0.2) +
annotate("rect", xmin = 530804459, xmax = 553314763, ymin = 0, ymax = 1.0, alpha = 0.2) +
annotate("rect", xmin = 575050466, xmax = 598315120, ymin = 0, ymax = 1.0, alpha = 0.2)
library(ggplot2)
library(dplyr)
setwd("D:/Pacific cod/DataAnalysis/PCod-Compare-repo/analyses/SlidingWindow")
swa_output = read.table("EastvWest/batch_8_SWA_eastwest_output_kernel_smoothing_1e+05_bootstraps_sigma_250000_div150_FILTERED.txt", header = TRUE, sep = "\t")
dim(swa_output)
swa_output_west = read.table("West/batch_8_final_filtered_west_2reg_kernel_smoothing_1e+05_bootstraps_sigma_250000_div150_FILTERED.txt", header = TRUE, sep = "\t")
dim(swa_output_west)
align = read.table("../alignment/batch_8_final_filtered_gadMor2LG_filteredMQ_sorted.bed", header=FALSE, sep="\t", colClasses = c("character", "integer", "integer", "character", "integer", "factor"))
dim(align)
colnames(align) <- c("chromosome", "position", "end", "locus", "MappingQuality", "X6")
head(align)
swa_input = read.table("EastvWest/batch_8_final_filtered_aligned_SWA_input_eastwest.txt", header=TRUE, sep="\t", colClasses = c("numeric", "character", "numeric", "character", "numeric"))
head(swa_input)
swa_input = read.table("EastvWest/batch_8_final_filtered_aligned_SWA_input_eastwest.txt", header=TRUE, sep="\t", colClasses = c("character", "numeric", "character", "numeric"))
swa_input = read.table("EastvWest/batch_8_SWA_input_west.txt", header=TRUE, sep="\t", colClasses = c("numeric", "character", "numeric", "character", "numeric"))
swa_input = read.table("West/batch_8_SWA_input_west.txt", header=TRUE, sep="\t", colClasses = c("numeric", "character", "numeric", "character", "numeric"))
swa_input = read.table("EastvWest/batch_8_final_filtered_aligned_SWA_input_eastwest.txt", header=TRUE, sep="\t", colClasses = c("numeric", "character", "numeric", "character", "numeric"))
head(swa_input)
swa_input_west = read.table("West/batch_8_SWA_input_west.txt", header=TRUE, sep="\t", colClasses = c("numeric", "character", "numeric", "character", "numeric"))
head(swa_input_west)
colnames(swa_input) <- c("locus", "fst", "chromosome", "position")
colnames(swa_input_west) <- c("locus", "fst", "chromosome", "position")
source("Plot_SlidingWindowAnalysis_Functions.R")
plot_outliers(data = swa_output, outlier_data = swa_input, Nb_bootstrap=100000, Nb_divisions = 150, which.chromosome.analysis="all", which.chromosome.plot="all",export = TRUE, name="SWA_EastWest_all_loci_plot")
plot_outliers(data = swa_output_west, outlier_data = swa_input_west, Nb_bootstrap=100000, Nb_divisions = 150, which.chromosome.analysis="all", which.chromosome.plot="all",export = TRUE, name="plot/West/SWA_West_all_loci_plot")
plot_outliers(data = swa_output_west, outlier_data = swa_input_west, Nb_bootstrap=100000, Nb_divisions = 150, which.chromosome.analysis="all", which.chromosome.plot="all",export = TRUE, name="plots/West/SWA_West_all_loci_plot")
source("Plot_SlidingWindowAnalysis_Functions.R")
plot_outliers(data = swa_output, outlier_data = swa_input, Nb_bootstrap=100000, Nb_divisions = 150, which.chromosome.analysis="all", which.chromosome.plot="all",export = TRUE, name="plots/EastWest/SWA_EastWest_all_loci_plot")
plot_outliers(data = swa_output_west, outlier_data = swa_input_west, Nb_bootstrap=100000, Nb_divisions = 150, which.chromosome.analysis="all", which.chromosome.plot="all",export = TRUE, name="plots/West/SWA_West_all_loci_plot")
library(TTR)
library(zoo) # don't need to install; will install with TTR
library(dplyr)
setwd("D:/Pacific cod/DataAnalysis/PCod-Compare-repo/analyses/SlidingWindow")
plotting_reg_interval = function(Dat=mydata, Sigma_sliding_window=3, Nb_bootstrap=1000000, which.chromosome.analysis="all", which.chromosome.plot="All",division=100,name_output="SLA_output", path_output=".") {
if(which.chromosome.analysis!="all") Data.analysis = subset(Dat, subset=chromosome %in% which.chromosome.analysis)
if(which.chromosome.analysis=="all") Data.analysis = Dat
N_data = nrow(Data.analysis)
Nb_chromosome = unique(Data.analysis$chromosome)
## initialize parameters
Expected_MA = c()
Bootstrap_mean = c()
Bootstrap_sd = c()
CI_all_chromosomes=c()
Position_MA = c()
to_export=c()
to_export=as.data.frame(to_export)
## for each chromosome:
for (ijk in Nb_chromosome)
{
Data.part = subset(Dat, Dat$chromosome %in% ijk)
Size_window = 3*Sigma_sliding_window  # sliding window is 3 times the value of sigma in each direction
Beg_position_cM=min(Data.part$position)+Size_window ## calculations cannot start at 0, because it would be biased no values between -6 and 0cM for example
End_position_cM=max(Data.part$position)-Size_window
Beg_position = which(Data.part$position >=Beg_position_cM)[1] ### start at the first position as calculated before or at the first position where there is a data point (as sometimes, a large portion of the chromosome is made of duplicated loci --> not kept for population studies)
End_position = which(Data.part$position >= (max(End_position_cM)))[1]
Positions_LG=seq(from=Beg_position_cM,to=End_position_cM,length.out=division)  ## these position will be equidistant
MA_calc = function(x, do.boot=FALSE) ## MA=Moving Average
{
if(do.boot==TRUE) Fst_data = Dat$fst[sample(1:nrow(Dat), size= nrow(Data.part), replace=TRUE)]
if(do.boot==FALSE) Fst_data = Data.part$fst
MA_windows = which(Data.part$position >= (Positions_LG[x]-Size_window) & Data.part$position <= (Positions_LG[x]+Size_window))
MA_weight = exp(-(Data.part$position[MA_windows]-Positions_LG[x])^2/(2*Sigma_sliding_window^2))
MA_val = sum(Fst_data[MA_windows]*MA_weight)/sum(MA_weight)
}
# calculate the MAs_exp for all positions
MAs_exp = sapply(1:division, function(x) MA_calc(x, do.boot=FALSE))[1:division]
# calculate the MAs_bootstrap for all positions
MAs_bootstrap = sapply(1:Nb_bootstrap, function(x) sapply(1:division, function(y) MA_calc(y, do.boot=TRUE))[1:division])
#Calculate Confidence Interval
CI_all=t(apply(MAs_bootstrap,1,function(x) quantile(x,c(0.5,0.025,0.975),na.rm=TRUE)))
# Mean_boot = apply(MAs_bootstrap, 1, mean)
Sd_boot = apply(MAs_bootstrap, 1, sd)
Expected_MA = c(Expected_MA, MAs_exp)
CI_all_chromosomes=rbind(CI_all_chromosomes,CI_all)
Bootstrap_sd=c(Bootstrap_sd,Sd_boot)
min_lower95=min(CI_all,na.rm=TRUE)
max_upper95=max(CI_all,na.rm=TRUE)
min_MA=min(MAs_exp,na.rm=TRUE)
max_MA=max(MAs_exp,na.rm=TRUE)
min_lim=min(c(min_lower95,max_upper95,min_MA,max_MA),na.rm=TRUE)-0.02
max_lim=max(c(min_lower95,max_upper95,min_MA,max_MA),na.rm=TRUE)+0.02
where.NA = which(is.na(CI_all[,2]))
plot(Positions_LG, MAs_exp, type="l", ylim=c(min_lim,max_lim), lwd=3, col="red", main = paste(ijk))
lines(Positions_LG, CI_all[,1], col=1, lwd=2)
lines(Positions_LG, CI_all[,2], col=rgb(0.3,0.1,0.4, 0.5))
lines(Positions_LG, CI_all[,3], col=rgb(0.3,0.1,0.4, 0.5))
if(length(where.NA)!=0) polygon(c(Positions_LG[-where.NA], rev(Positions_LG[-where.NA])), c(CI_all[,2][-where.NA], rev(CI_all[,3][-where.NA])), col=rgb(0.3,0.1,0.4, 0.5))
if(length(where.NA)==0) polygon(c(Positions_LG, rev(Positions_LG)), c(CI_all[,2], rev(CI_all[,3])), col=rgb(0.3,0.1,0.4, 0.5))
positions_to_add=Positions_LG
chromosome=matrix(ijk,length(positions_to_add),1)
to_export_temp=cbind(chromosome,positions_to_add,MAs_exp,CI_all)
to_export_temp=as.data.frame(to_export_temp)
to_export=rbind(to_export,to_export_temp)
}
(P_value = pnorm(Expected_MA, CI_all_chromosomes[,1], Bootstrap_sd))
print (P_value)
to_export=cbind(to_export,P_value)
output<-paste(path_output,'/',name_output,'_kernel_smoothing_',Nb_bootstrap,'_bootstraps_sigma_',Sigma_sliding_window,'_div',division,'.txt', sep='')
colnames(to_export)=c("chromosome","position","Fst/Fct","Mean_boostrap","lower_95","upper_95","pvalue")
print(head(to_export))
write.table(to_export,file=output,quote=FALSE,sep="\t",col.names=TRUE,row.names=FALSE)
}
cpos_data <- read.delim("EastvWest/batch_8_final_filtered_aligned_SWA_input_eastwest_sorted_cpos.txt",header=TRUE)
head(cpos_data)
colnames(cpos_data) <- c("Locus", "fst", "chromosome", "position")
head(cpos_data)
plotting_reg_interval(Dat = cpos_data, Sigma_sliding_window=250000, Nb_bootstrap=100000, which.chromosome.analysis="PCodG",which.chromosome.plot="PCodG",division=3450,name_output="EastvWest/batch_8_eastwest_cpos_output",path_output=".")
east <- read.delim("EastvWest/batch_8_final_filtered_aligned_SWA_input_eastwest_sorted.txt",header=TRUE)
eastwest <- read.delim("EastvWest/batch_8_final_filtered_aligned_SWA_input_eastwest_sorted.txt",header=TRUE)
head(eastwest)
west <- read.delim("West/batch_8_SWA_input_west_sorted.txt",sep="\t", header=TRUE)
head(west)
dim(west)
dim(eastwest)
library(ggplot2)
library(dplyr)
combo <- inner_join(eastwest,west,by="Locus")
head(combo)
plot(combo$fst.x, combo$fst.y, xlab="East v. West Fst", ylab="Within West Fst")
plot(combo$fst.x, combo$fst.y, xlab="East v. West Fst", ylab="Within West Fst", main = "Correlation between Within-West and East v. West Fst")
library(TTR)
library(zoo) # don't need to install; will install with TTR
library(dplyr)
## set working directory
setwd("D:/Pacific cod/DataAnalysis/PCod-Compare-repo/analyses/SlidingWindow")
## read in files with loci positions and fst
east <- read.delim("batch_8_SWA_input_east_sorted.txt",header=TRUE)
head(east)
dim(east)
west <- read.delim("West/batch_8_SWA_input_west_sorted.txt",sep="\t", header=TRUE)
head(west)
dim(west)
both groups
align_data <- inner_join(east,west,by="Locus")
dim(align_data)
head(align_data)
## split data files back into east and west
east_matched <- select(align_data, c("Locus", "fst.x", "chromosome.x", "position.x"))
head(east_matched)
colnames(east_matched) <- c("Locus", "fst", "chromosome", "position")
west_matched <- select(align_data, c("Locus", "fst.y", "chromosome.y", "position.y"))
head(west_matched)
colnames(west_matched) <- c("Locus", "fst", "chromosome", "position")
dim(east_matched)
dim(west_matched)
plotting_reg_interval = function(Dat=mydata, Sigma_sliding_window=3, Nb_bootstrap=1000000, which.chromosome.analysis="all", which.chromosome.plot="All",division=100,name_output="SLA_output", path_output=".") {
if(which.chromosome.analysis!="all") Data.analysis = subset(Dat, subset=chromosome %in% which.chromosome.analysis)
if(which.chromosome.analysis=="all") Data.analysis = Dat
N_data = nrow(Data.analysis)
Nb_chromosome = unique(Data.analysis$chromosome)
## initialize parameters
Expected_MA = c()
Bootstrap_mean = c()
Bootstrap_sd = c()
CI_all_chromosomes=c()
Position_MA = c()
to_export=c()
to_export=as.data.frame(to_export)
## for each chromosome:
for (ijk in Nb_chromosome)
{
Data.part = subset(Dat, Dat$chromosome %in% ijk)
Size_window = 3*Sigma_sliding_window  # sliding window is 3 times the value of sigma in each direction
Beg_position_cM=min(Data.part$position)+Size_window ## calculations cannot start at 0, because it would be biased no values between -6 and 0cM for example
End_position_cM=max(Data.part$position)-Size_window
Beg_position = which(Data.part$position >=Beg_position_cM)[1] ### start at the first position as calculated before or at the first position where there is a data point (as sometimes, a large portion of the chromosome is made of duplicated loci --> not kept for population studies)
End_position = which(Data.part$position >= (max(End_position_cM)))[1]
Positions_LG=seq(from=Beg_position_cM,to=End_position_cM,length.out=division)  ## these position will be equidistant
MA_calc = function(x, do.boot=FALSE) ## MA=Moving Average
{
if(do.boot==TRUE) Fst_data = Dat$fst[sample(1:nrow(Dat), size= nrow(Data.part), replace=TRUE)]
if(do.boot==FALSE) Fst_data = Data.part$fst
MA_windows = which(Data.part$position >= (Positions_LG[x]-Size_window) & Data.part$position <= (Positions_LG[x]+Size_window))
MA_weight = exp(-(Data.part$position[MA_windows]-Positions_LG[x])^2/(2*Sigma_sliding_window^2))
MA_val = sum(Fst_data[MA_windows]*MA_weight)/sum(MA_weight)
}
# calculate the MAs_exp for all positions
MAs_exp = sapply(1:division, function(x) MA_calc(x, do.boot=FALSE))[1:division]
# calculate the MAs_bootstrap for all positions
MAs_bootstrap = sapply(1:Nb_bootstrap, function(x) sapply(1:division, function(y) MA_calc(y, do.boot=TRUE))[1:division])
#Calculate Confidence Interval
CI_all=t(apply(MAs_bootstrap,1,function(x) quantile(x,c(0.5,0.025,0.975),na.rm=TRUE)))
# Mean_boot = apply(MAs_bootstrap, 1, mean)
Sd_boot = apply(MAs_bootstrap, 1, sd)
Expected_MA = c(Expected_MA, MAs_exp)
CI_all_chromosomes=rbind(CI_all_chromosomes,CI_all)
Bootstrap_sd=c(Bootstrap_sd,Sd_boot)
min_lower95=min(CI_all,na.rm=TRUE)
max_upper95=max(CI_all,na.rm=TRUE)
min_MA=min(MAs_exp,na.rm=TRUE)
max_MA=max(MAs_exp,na.rm=TRUE)
min_lim=min(c(min_lower95,max_upper95,min_MA,max_MA),na.rm=TRUE)-0.02
max_lim=max(c(min_lower95,max_upper95,min_MA,max_MA),na.rm=TRUE)+0.02
where.NA = which(is.na(CI_all[,2]))
#plot(Positions_LG, MAs_exp, type="l", ylim=c(min_lim,max_lim), lwd=3, col="red", main = paste(ijk))
#lines(Positions_LG, CI_all[,1], col=1, lwd=2)
#lines(Positions_LG, CI_all[,2], col=rgb(0.3,0.1,0.4, 0.5))
#lines(Positions_LG, CI_all[,3], col=rgb(0.3,0.1,0.4, 0.5))
#if(length(where.NA)!=0) polygon(c(Positions_LG[-where.NA], rev(Positions_LG[-where.NA])), c(CI_all[,2][-where.NA], rev(CI_all[,3][-where.NA])), col=rgb(0.3,0.1,0.4, 0.5))
#if(length(where.NA)==0) polygon(c(Positions_LG, rev(Positions_LG)), c(CI_all[,2], rev(CI_all[,3])), col=rgb(0.3,0.1,0.4, 0.5))
positions_to_add=Positions_LG
chromosome=matrix(ijk,length(positions_to_add),1)
to_export_temp=cbind(chromosome,positions_to_add,MAs_exp,CI_all)
to_export_temp=as.data.frame(to_export_temp)
to_export=rbind(to_export,to_export_temp)
print("Done with Chromosome:")
print(ijk)
}
(P_value = pnorm(Expected_MA, CI_all_chromosomes[,1], Bootstrap_sd))
print (P_value)
to_export=cbind(to_export,P_value)
output<-paste(path_output,'/',name_output,'_kernel_smoothing_',Nb_bootstrap,'_bootstraps_sigma_',Sigma_sliding_window,'_div',division,'.txt', sep='')
colnames(to_export)=c("chromosome","position","Fst/Fct","Mean_boostrap","lower_95","upper_95","pvalue")
print(head(to_export))
write.table(to_export,file=output,quote=FALSE,sep="\t",col.names=TRUE,row.names=FALSE)
}
plotting_reg_interval(Dat = west_matched, Sigma_sliding_window=250000, Nb_bootstrap=100000, which.chromosome.analysis="all",which.chromosome.plot="all",division=150,name_output="West/batch_8_final_filtered_west_matched",path_output=".")
filter_marker_density = function(swa_output = swa_output, swa_input = swa_input, window_size = 250000, divisions = 150, cutoff = 2, outfile = "output_kernel_smoothing_1e+5_bootstraps_sigma_250000_div15_FILTERED.txt"){
print("Warning: this function assumes that all positions are unique")
window_size=window_size
divisions=divisions
Num_marker_data = nrow(swa_input)
Num_chromosome = unique(swa_input$chromosome)
chromosomes_all= rep(Num_chromosome,each=divisions) # `each` argument should == divisions
Positions_all=c()
markers_per_window=c()
## CHARLIE'S CODE: for loop to calculate markers per window on each chromosome
for (ijx in Num_chromosome){
Data.chrom = subset(swa_input, swa_input$chromosome==ijx)
Size_windows = 3*window_size  # sliding window is 3 times the value of sigma in each direction
Beg_position_cM=min(Data.chrom$position)+Size_windows  ## calculations cannot start at 0, because it would be biased no values between -6 and 0cM for example
End_position_cM=max(Data.chrom$position)-Size_windows
Beg_position = which(Data.chrom$position >=Beg_position_cM)[1] ### start at the first position as calculated before or at the first position where there is a data point (as sometimes, a large portion of the chromosome is made of duplicated loci --> not kept for population studies)
End_position = which(Data.chrom$position >= (max(End_position_cM)))[1]
Positions_LG=seq(from=Beg_position_cM,to=End_position_cM,length.out=divisions)  ## these position will be equidistant
Positions_all=c(Positions_all,Positions_LG)
markers_each_chrom=c()
for (x in 1:length(Positions_LG)){
MA_window = which(Data.chrom$position >= (Positions_LG[x]-Size_windows) & Data.chrom$position <= (Positions_LG[x]+Size_windows))
num_markers = length(MA_window)
markers_per_window = c(markers_per_window,num_markers)
}
}
## save output as a matrix
output=c()   ##be sure to clear output from previous runs
output=data.frame(chromosomes_all,Positions_all,markers_per_window)
colnames(output)=c("chrom","position","num_markers")
marker_density = output
cutoff = cutoff
## remove data when num_markers is less than cutoff
marker_density$num_markers[marker_density$num_markers < cutoff] <- NA
marker_density$position <- as.character(marker_density$position)
pos_to_remove <- marker_density[is.na(marker_density$num_markers),2]
print("Number of data points to remove based on marker density:")
print(length(pos_to_remove))
swa_output$position <- as.character(swa_output$position)
count = 0
swa_output_filtered <- swa_output
for(i in swa_output$position){
newpos <- i
if(newpos %in% pos_to_remove){
count = count + 1
row_index <- which(swa_output$position == i)
swa_output_filtered[row_index,3] <- NA
}
}
print("Number of positions actually removed from analysis:")
print(count)
write.table(swa_output_filtered, outfile, sep ="\t", row.names = FALSE, quote=FALSE)
}
swa_output_east = read.table("batch_8_final_filtered_east_globalFST_kernel_smoothing_1e+05_bootstraps_sigma_250000_div150.txt", header = TRUE, sep = "\t")
swa_input_east = read.table("batch_8_SWA_input_east_sorted.txt", header = TRUE, sep = "\t")
filter_marker_density(swa_output = swa_output_east, swa_input = swa_input_east, window_size = 250000, divisions = 150, cutoff = 2, outfile = "West/batch_8_final_filtered_east_globalFST_kernel_smoothing_1e+05_bootstraps_sigma_250000_div150_FILTERED.txt")
library(ggplot2)
library(ggalt)
library(RColorBrewer)
library(plyr)
library(dplyr)
install.packages("ggalt")
library(ggalt)
options(scipen = 999) #Positive values bias towards fixed and negative towards scientific notation
# Set the bw theme (layout) for ggplot.
theme_set(theme_bw())
setwd("D:/Pacific cod/DataAnalysis/PCod-Compare-repo/stacks_pipeline_analyses")
mydata <- read.delim("fastq_readcounts_forR.txt")
View(mydata)
head(mydata)
ggplot(mydata,aes(x=n_reads, fill = group)) +
geom_histogram(data = mydata, bins= 20) +
facet_wrap(~population) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
head(mydata)
mydata_kor <- mutate(mydata_kor, mill_reads = n_reads/1000000)
mydata_kor <- filter(mydata, group == "Korea")
mydata_kor <- mutate(mydata_kor, mill_reads = n_reads/1000000)
head(mydata_kor)
mydata_ak <- mydata %>%
filter(group == "Alaska") %>%
mutate(mill_reads = n_reads/1000000)
head(mydata_ak)
?ggplot
ggplot(mydata_kor,aes(x=mill_reads, fill = group)) +
geom_histogram(data = mydata_kor, bins= 20, fill = "skyblue") +
facet_wrap(~population) +
xlab("Number of Raw Reads (x 1 million)")
ggplot(mydata_kor,aes(x=mill_reads, fill = group)) +
geom_histogram(data = mydata_kor, bins= 20, fill = "skyblue") +
facet_wrap(~population) +
xlab("Number of Raw Reads (x 1 million)") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
xlim(0,100)
ggplot(mydata_kor,aes(x=mill_reads, fill = group)) +
geom_histogram(data = mydata_kor, bins= 20, fill = "skyblue") +
facet_wrap(~population) +
xlab("Number of Raw Reads (x 1 million)") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
xlim(0,25)
ggplot(mydata_kor,aes(x=mill_reads, fill = group)) +
geom_histogram(data = mydata_kor, bins= 20, fill = "skyblue") +
facet_wrap(~population) +
xlab("Number of Raw Reads (x 1 million)") +
ylab("Number of Individuals") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
xlim(0,20)
ggplot(mydata_ak,aes(x=mill_reads, fill = group)) +
geom_histogram(data = mydata_ak, bins= 20) +
facet_wrap(~population) +
xlab("Number of Raw Reads (x 1 million)") +
ylab("Number of Individuals") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
xlim(0,20)
mydata_kor <- filter(mydata, group == "Korea")
mydata_kor <- mutate(mydata_kor, mill_reads = n_reads/100000)
head(mydata_kor)
mydata_ak <- mydata %>%
filter(group == "Alaska") %>%
mutate(mill_reads = n_reads/100000)
head(mydata_ak)
mydata_kor <- filter(mydata, group == "Korea")
mydata_kor <- mutate(mydata_kor, th_reads = n_reads/100000)
head(mydata_kor)
mydata_ak <- mydata %>%
filter(group == "Alaska") %>%
mutate(th_reads = n_reads/100000)
head(mydata_ak)
ggplot(mydata_kor,aes(x=th_reads, fill = group)) +
geom_histogram(data = mydata_kor, bins= 20, fill = "skyblue") +
facet_wrap(~population) +
xlab("Number of Raw Reads (x 1 million)") +
ylab("Number of Individuals") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(mydata_kor,aes(x=th_reads, fill = group)) +
geom_histogram(data = mydata_kor, bins= 20, fill = "skyblue") +
facet_wrap(~population) +
xlab("Number of Raw Reads (x 100,000)") +
ylab("Number of Individuals") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
xlim(0,200)
ggplot(mydata_ak,aes(x=th_reads, fill = group)) +
geom_histogram(data = mydata_ak, bins= 20) +
facet_wrap(~population) +
xlab("Number of Raw Reads (x 100,000)") +
ylab("Number of Individuals") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
xlim(0,200)
ggplot(mydata_kor,aes(x=th_reads, fill = group)) +
geom_histogram(data = mydata_kor, bins= 20, fill = "skyblue") +
facet_wrap(~population) +
xlab("Number of Raw Reads (x 100,000)") +
ylab("Number of Individuals") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(axis.text=element_text(size=12)) +
xlim(0,200)
ggplot(mydata_kor,aes(x=th_reads, fill = group)) +
geom_histogram(data = mydata_kor, bins= 20, fill = "skyblue") +
facet_wrap(~population) +
xlab("Number of Raw Reads (x 100,000)") +
ylab("Number of Individuals") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(axis.text=element_text(size=12), axis.title = element_text(size=12)) +
xlim(0,200)
ggplot(mydata_ak,aes(x=th_reads, fill = group)) +
geom_histogram(data = mydata_ak, bins= 20) +
facet_wrap(~population) +
xlab("Number of Raw Reads (x 100,000)") +
ylab("Number of Individuals") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(axis.text=element_text(size=12), axis.title = element_text(size=12)) +
xlim(0,200)
# Set working directory
setwd("D:/Pacific cod/DataAnalysis/PCod-Compare-repo/stacks_pipeline_analyses/analyses_AK_LowGenotypeRate/batch8")
########################## PSTACKS
#Read in your datatable from a tab-delimited text file
mydata <- read.delim("pstacks_loci_counts_b8_forR.txt")
#### HEADER SHOULD BE:(tab delimited)
#filename loci  population
View(mydata)
# Make the plot!!!
mydata_kor <- filter(mydata, group == "Korea")
mydata_ak <- filter(mydata, group == "Alaska")
View(mydata_kor)
ggplot(mydata_kor,aes(x=n_loci, fill = group)) +
geom_histogram(data = mydata_kor, bins= 20, fill = "skyblue") +
facet_wrap(~population) +
xlab("Number of Loci Discovered") +
ylab("Number of Individuals") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(axis.text=element_text(size=12), axis.title = element_text(size=12)) +
xlim(0,27000)
ggplot(mydata_ak,aes(x=n_loci, fill = group)) +
geom_histogram(data = mydata_ak, bins= 20) +
facet_wrap(~population) +
xlab("Number of Loci Discovered") +
ylab("Number of Individuals") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(axis.text=element_text(size=12), axis.title = element_text(size=12)) +
xlim(0,27000)
